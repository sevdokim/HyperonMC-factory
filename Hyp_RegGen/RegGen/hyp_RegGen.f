C
!     subroutine RegGen_event    !   Initial routine
      subroutine RegGen_event(BeamMomentum,Ievent,Ierror,Iseed,Jrec,IstOut,Pout)  ! S.Sadovsky 
C.........................................................................................
C        version 2.14: f2(1270) width varying through control is added
C        Version 2.13: omg->3pi0, omg->2pi0, omg->etapi0 channels added. 
C          channel selection is done by external control parameter
C        Version 2.12:
C        rho0(770)->pi0gamma added to hyp_carlo part of the generator
C        Version 2.11a:
C        Adjust f2 t and MisMas distributions in hyp_carlo
C             Version 2.11:
C        Use ranlux as random numbers generator, fix bug in usage of 
C        BW function for spin2 particles (GeV -> MeV convertion)  
C             Version 2.10:
C        Add K0s, f2(1270) incl reactions + Hyp_Carlo Inclusives
C           		      17.02.2019
C             Version 2.00: 
C        RegGen.cards + abtocds + f0(1370) 
C             S.A.Sadovsky,   27.07.2017
C.........................................................................................
C
C     RegGen - MB event generator for medium energies  Version 1.02:   K0s - stable
C              besed on Regge model and PDG tables     S.A.Sadovsky,   27.06.2017
C
C     This routine generates 1 event at the beam momentun 7 GeV/c 
C      
C     Input: Ireac1,Ireac2 - range of the genarated reactions according to
C            the reaction list in the common/rections/Ireac1,Ireac2,React(10,100) 
C
C     Output data are placed in the common/MC_event/, where:
C 
C     Ievent - genarator internal event number
C     Ierror - event error flag: for normal event Ierror=0, otherwise Ierror > 0
C     iseed  - random seed to be used in generator
C     Jrec   - exclusive reaction number listed in the common/rections/
C     IstOut - number of stable particles in the final state of event, including barion  
C     Pout(10,500) - 10-vector of the final particles (Ip = 1,500):
C                    Pout(1-5,Ip) -- 5-vector of particle Ip
C                    Pout(6-8,Ip) -- coordinates of particle Ip
C                    Pout(  9,Ip) -- PDG particle code
C                    Pout( 10,Ip) -- particle history event                    
C........................................................................................
C
      double precision S,T,Pa(5),Pb(5),Pc(5),Pd(5)
C-    double precision P1(5), P2(5), P3(5), P4(5), PPc, CtauK0
C-    double precision Xvertex, Yvertex, Zvertex, Random, R1, R2, FF
C-    double precision Double_Mass_distr_2pi0, BW, alpha, ptmean,AmXmin
C-    double precision DDD,AA,BB,CC,EE,Disk
C
      double precision Pout(10,500)
C-    common/MC_event/ Ievent,Ierror,Jrec,IstOut,Pout(10,500)
      double precision Pdec(10,5),Pdc2(10,5),Pdc3(10,5),Pdc4(10,5)
     +                                                 ,Pdc5(10,5)
C
C        1         1         1         1         1         1         1
C    
C        Stable particle Names, PDG codes, Masses 
C     ------------------------------------------------------------
      CHARACTER*5 ChrSt                                          ! along the particle internal Index 
      common/stable_part/ ChrSt(45), IcdSt(45), AmsSt(45)        !       Index = 1,12
      data ChrSt(1:6), IcdSt(1:6), AmsSt(1:6) /  
     +   'Y',     'pi+',    'pi-',   'K+',     'K-',   'K0L',    !       Name
     +    22,      211,     -211,     321,     -321,    130,     !       PDG code
     +    0.,   0.139570, 0.139570, 0.493677, 0.493677, 0.497614/!       Mass
C     
      data ChrSt(7:12), IcdSt(7:12), AmsSt(7:12) /  
     +   'p',     'n',    'Lamda',  'Sigm+',   'Sigm-',  'Sigm0',!       Name
     +  2212,     2112,     3122,    3222,     -3222,      3212, !       PDG code
     +0.938272, 0.939565, 1.115683, 1.189370, 1.197449, 1.192642/!       Mass                       
C
      data ChrSt(45:45),IcdSt(45:45),AmsSt(45:45) / 'K0s',310,0.497614/  ! K0s
C
C
C        Reaction table, reaction Index = 1,83 
C     -------------------------------------------     
C
      common/rections/ Ireac1, Ireac2, Mcarlo, React(10,100)
      data Ireac1,Ireac2, Mcarlo, React /  16, 71, 10,                      
C
C     Index_R - reaction index
C     Prob    - reaction probabilityPout(10,500)
C     Beam    - beam particle internal index
C     Targ    - target particle internal index
C     C_part  - C particle internal index
C     D_part  - D particle internal index
C     N_Regge - number of Regge trajectories in reaction
C     Regge_1 - index of the 1-st Regge trajectory in reaction
C     Regge_2 - index of the 2-nd Regge trajectory in reaction
C     Regge_3 - index of the 3-rd Regge trajectory in reaction
C     
C-  Index_R Prob Beam Targ C_part D_part N_Regge Regge_1 Regge_2 Regge_3   Reaction:
C
     +  1.,  1.,  2.,  8.,   13.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi0 + X     incl Carlo
     +  2.,  1.,  2.,  8.,   14.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta + X     incl Carlo
     +  3.,  1.,  2.,  8.,   19.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg + X     incl Carlo     
     +  4.,  1.,  4.,  8.,   45.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> K0s + X     incl Carlo
     +  5.,  1.,  2.,  8.,   27.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> f2(1270)+ X incl Carlo
     +  6.,  1.,  2.,  8.,   64.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(2pi0)+ X incl Carlo	    
     +  7.,  1.,  2.,  8.,   15.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> f0(500) + X incl Carlo  
     +  8.,  1.,  2.,  8.,   13.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi0 + X     Z-MC calibration
     +  9.,  1.,  2.,  8.,   14.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta + X     Z-MC calibration
     + 10.,  1.,  2.,  8.,   15.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> Empty   + X incl Carlo   
C
     + 11.,  1.,  2.,  8.,   13.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi0 + X     incl as Sum
     + 12.,  1.,  2.,  8.,   14.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta + X     incl as Sum
     + 13.,  1.,  2.,  8.,   19.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg + X     incl as Sum
     + 14.,  1.,  4.,  8.,   45.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> K0s + X     incl as Sum
     + 15.,  1.,  2.,  8.,   27.,  -7.,    1.,    1.,     2.,     3.,  !  pi+n -> f2(1270)+ X incl as Sum  
     + 16.,  1.,  2.,  8.,   13.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi0 + p      ==> 1000
     + 17.,  1.,  2.,  8.,   14.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta + p      ==> 1000
     + 18.,  1.,  2.,  8.,   19.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg + p      ==> 1000
     + 19.,  1.,  2.,  8.,   15.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f0(500) + p	  ==>  944
     + 20.,  1.,  2.,  8.,   16.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> rho0    + p	  ==>  989
     + 21.,  1.,  2.,  8.,   17.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> rho+    + n	  ==>  987
     + 22.,  1.,  2.,  8.,   21.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f0(980) + p	  ==>  997
     + 23.,  1.,  2.,  8.,   25.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> b1(1235) + p    ==>  955
     + 24.,  1.,  2.,  8.,   26.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> b1+(1235)+ n    ==>  946
     + 25.,  1.,  2.,  8.,   27.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f2(1270) + p    ==>  992
     + 26.,  1.,  2.,  8.,   28.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f1(1285) + p    ==>  990
     + 27.,  1.,  2.,  8.,   36.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f1(1420) + p    ==>  bad ? => 832
     + 28.,  1.,  2.,  8.,   42.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f2(1525) + p    ==>  989
     + 29.,  1.,  2.,  8.,   22.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> a0(980)  + p    ==>  985
     + 30.,  1.,  2.,  8.,   23.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> a0+(980) + n    ==>  976
     + 31.,  1.,  2.,  8.,   30.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> a20(1320)+ p    ==>  988  
     + 32.,  1.,  2.,  8.,   31.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> a2+(1320) + n   ==>  991 
     + 33.,  1.,  2.,  8.,   32.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f0(1370)  + p   ==>  bad ? => 761 => 1000
     + 34.,  1.,  2.,  8.,   20.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta'      + p   ==> 1000
     + 35.,  1.,  2.,  8.,   29.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta(1295) + p   ==>  975
     + 36.,  1.,  2.,  8.,   33.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi1(1400) + p   ==>  969
     + 37.,  1.,  2.,  8.,   34.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> pi1+(1400) + n  ==>  964
     + 38.,  1.,  2.,  8.,   43.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> pi2(1670)  + p  ==>  956
     + 39.,  1.,  2.,  8.,   44.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> pi2+(1670) + n  ==>  953
     + 40.,  1.,  2.,  8.,   57.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> rho3(1690) + p  ==>  996
     + 41.,  1.,  2.,  8.,   58.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> rho3+(1690)+ n  ==>  993
     + 42.,  1.,  2.,  8.,   35.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta(1405)  + p  ==>  871  
     + 43.,  1.,  2.,  8.,   36.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta(1420)  + p  ==>  832
     + 44.,  1.,  2.,  8.,   37.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg(1420)  + p  ==>  967
     + 45.,  1.,  2.,  8.,   38.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> a0(1450)   + p  ==>  988
     + 46.,  1.,  2.,  8.,   39.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> a0+(1450)  + n  ==>  988
     + 47.,  1.,  2.,  8.,   40.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> eta(1475)  + p  ==>  970
     + 48.,  1.,  2.,  8.,   41.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> f0(1500)   + p  ==>  997
     + 49.,  1.,  4.,  8.,   45.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K0	   + p    ==> 1000 
     + 50.,  1.,  4.,  8.,   46.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K0(892)  + p    ==>  986 
     + 51.,  1.,  4.,  8.,   49.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K0(1430) + p    ==>  979 
     + 52.,  1.,  4.,  8.,   51.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K2(1430) + p    ==>  924 
     + 53.,  1.,  4.,  8.,   53.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K2(1680) + p    ==>  937 
     + 54.,  1.,  4.,  8.,   55.,   7.,    1.,    1.,     2.,     3.,  !  K+n  -> K3(1780) + p    ==>  982 
     + 55.,  1.,  4.,  8.,   47.,   8.,    1.,    1.,     2.,     3.,  !  K+n  -> K+(892)  + n    ==>  984 
     + 56.,  1.,  4.,  8.,   50.,   8.,    1.,    1.,     2.,     3.,  !  K+n  -> K0+(1430) + n   ==>  985 
     + 57.,  1.,  4.,  8.,   52.,   8.,    1.,    1.,     2.,     3.,  !  K+n  -> K2+(1430) + n   ==>  939 
     + 58.,  1.,  4.,  8.,   54.,   8.,    1.,    1.,     2.,     3.,  !  K+n  -> K2+(1680) + n   ==>  952 
     + 59.,  1.,  4.,  8.,   56.,   8.,    1.,    1.,     2.,     3.,  !  K+n  -> K3+(1780) + n   ==>  972 
     + 60.,  1.,  2.,  8.,   45.,  10.,    1.,    1.,     2.,     3.,  !  pi+n -> K0	    + Sig+ ==> 1000 
     + 61.,  1.,  2.,  8.,   46.,  10.,    1.,    1.,     2.,     3.,  !  pi+n -> K0*(892)  + Sig+ ==>  988 
     + 62.,  1.,  2.,  8.,   49.,  10.,    1.,    1.,     2.,     3.,  !  pi+n -> K0*(1430) + Sig+ ==>  973
     + 63.,  1.,  2.,  8.,   51.,  10.,    1.,    1.,     2.,     3.,  !  pi+n -> K20(1430) + Sig+ ==>  924
     + 64.,  1.,  2.,  8.,   47.,  12.,    1.,    1.,     2.,     3.,  !  pi+n -> K+(892)   + Sig0 ==>  982
     + 65.,  1.,  2.,  8.,   50.,  12.,    1.,    1.,     2.,     3.,  !  pi+n -> K0+(1430) + Sig0 ==>  977
     + 66.,  1.,  2.,  8.,   52.,  12.,    1.,    1.,     2.,     3.,  !  pi+n -> K2+(1430) + Sig0 ==>  918
     + 67.,  1.,  2.,  8.,   59.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> phi(1680) + p    ==>  974	 
     + 68.,  1.,  2.,  8.,   60.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg(1650) + p    ==>  Sdv corr
     + 69.,  1.,  2.,  8.,   61.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> omg+(1650)+  + n ==>  Sdv corr
     + 70.,  1.,  2.,  8.,   62.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> omg3(1670) + p   ==>  Sdv corr
     + 71.,  1.,  2.,  8.,   63.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> omg3+(1670)+ + n ==>  Sdv corr  
C Phase Space:      
     + 72.,  1.,  2.,  8.,   64.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(pi0pi0) + p     
     + 73.,  1.,  2.,  8.,   65.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(pi0pi+) + n   
     + 74.,  1.,  2.,  8.,   66.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(etapi0) + p 
     + 75.,  1.,  2.,  8.,   67.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(etapi+) + n   
     + 76.,  1.,  2.,  8.,   68.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(omgpi0) + p
     + 77.,  1.,  2.,  8.,   69.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(omhpi+) + n 
     + 78.,  1.,  2.,  8.,   70.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(3pi0)   + p
     + 79.,  1.,  2.,  8.,   71.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(pi0pi+pi-) + p
     + 80.,  1.,  2.,  8.,   72.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(2pi0pi+)	+ n
     + 81.,  1.,  2.,  8.,   73.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(eta2pi0)	+ p
     + 82.,  1.,  2.,  8.,   74.,   7.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(etapi+pi-) + p
     + 83.,  1.,  2.,  8.,   75.,   8.,    1.,    1.,     2.,     3.,  !  pi+n -> PS(etapi0pi+) + n
C       
     + 170*0. / 
C ......................................................................................................
C
C     Secondary particle table
C    -----------------------------  
      real Part, REGRNDM
      common/secondaris/ Npart, Nreson, Part(65,100)
      data Npart, Nreson, Part / 75, 63, 
C
C     Id_part  Mass  Width Spin N_dec P_dec N_sec I_sec 2_sec 3_sec 4_sec
C photon
     +  1., 0.000000, 0.,   0., 0., 1.000,  1.,   1.,   1.,   0.,   0.,    ! Y
     +         54*0.,
C pi+
     +  2., 0.139570, 0.,   0., 0., 1.000,  1.,   1.,   1.,   0.,   0.,    ! pi+
     +         54*0.,
C pi-
     +  3., 0.139570, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! pi-
     +         54*0.,
C K+
     +  4., 0.493677, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! K+
     +        54*0.,
C K-
     +  5., 0.493677, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! K-
     +        54*0.,
C K0L
     +  6., 0.497614, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! K0L
     +        54*0.,
C p  
     +  7., 0.938272, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! p
     +        54*0.,
C n
     +  8., 0.939565, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! n
     +        54*0.,
C Lambda 
     +  9., 1.115683, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! Lambda
     +        54*0.,
C Sigma+
     + 10., 1.189370, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! Sigma+
     +        54*0.,
C Sigma-
     + 11., 1.197449, 0.,   0., 0., 1.000,  1.,   1.,   1.,   0.,   0.,    ! Sigma-
     +        54*0.,
C Sigma0
     + 12., 1.192642, 0.,   0., 0., 1.000,  1.,   1.,  1.,   0.,   0.,     ! Sigma0
     +        54*0.,
C pi0
     + 13., 0.134977, 0.,   0., 1., 1.000,  2.,   1.,   1.,   0.,   0.,    ! pi0
     +        54*0.,
C eta   
     + 14., 0.547862, 0.,   0., 4., 0.3931, 2.,   1.,  1.,   0.,   0.,     ! eta
     +                              0.3257, 3.,  13., 13.,  13.,   0.,     ! eta
     +                              0.2274, 3.,  13.,  2.,   3.,   0.,     ! eta    
     +                              0.0460, 3.,   1.,  2.,   3.,   0.,     ! eta 
     +         36*0.,  
C f0(500)
     + 15., 0.475000,0.550, 0., 2., 0.333,  2.,   1.,  1.,   0.,   0.,     ! f0(500)
     +                              0.667,  2.,   2.,  3.,   0.,   0.,     ! f0(500) 
     +        48*0.,
C rho0
     + 16., 0.77526, 0.149,-1., 1., 1.000,  2.,   2.,  3.,   0.,   0.,     ! rho0
     +        54*0.,  
C rho+
     + 17., 0.77526, 0.149,-1., 1., 1.000,  2.,   2.,  13.,   0.,   0.,    ! rho+
     +        54*0., 
C rho-
     + 18., 0.77526, 0.149,-1., 1., 1.000,  2.,   3.,  13.,   0.,   0.,    ! rho-
     +        54*0.,          
C omg
     + 19., 0.78265,0.0085, 1., 3., 0.0828,  2.,  13.,  1.,   0.,   0.,    ! omg
     +                              0.8920,  3.,  13.,  2.,   3.,   0.,    ! omg
     +                              0.0153,  2.,   2.,  3.,   0.,   0.,    ! omg  
     +        42*0.,     
C eta'                                                                               --> Sdv corr
     + 20., 0.95778, 0.000, 0., 5., 0.2230,  3.,  14., 13.,  13.,   0.,    ! eta'
     +                              0.4290,  3.,  14.,  2.,   3.,   0.,    ! eta'
     +                              0.2910,  2.,  16.,  1.,   0.,   0.,    ! eta'
     +                              0.0262,  2.,  19.,  1.,   0.,   0.,    ! eta'
     +                              0.0221,  2.,   1.,  1.,   0.,   0.,    ! eta'  
     +        30*0.,
C f0(980)                                                                            --> Sdv corr
     + 21., 0.99000, 0.050, 0., 2., 0.333,  2.,  13.,  13.,   0.,   0.,    ! f0(980)
     +                              0.667,  2.,   2.,   3.,   0.,   0.,    ! f0(980) 
     +        48*0.,
C a0(980)  
     + 22., 0.98000, 0.075, 0., 1., 1.000,  2.,  13.,  14.,   0.,   0.,    ! a0(980)
     +        54*0.,    
C a0+(980)  
     + 23., 0.98000, 0.075, 0., 1., 1.000,  2.,   2.,  14.,   0.,   0.,    ! a0+(980)
     +        54*0.,
C a0-(980)  
     + 24., 0.98000, 0.075, 0., 1., 1.000,  2.,   3.,  14.,   0.,   0.,    ! a0-(980)
     +        54*0.,   
C b1(1235)
     + 25., 1.22950, 0.142,-1., 1., 1.000,  2.,  19.,  13.,   0.,   0.,    ! b1(1235)
     +        54*0., 
C b1+(1235)
     + 26., 1.22950, 0.142,-1., 1., 1.000,  2.,  19.,   2.,   0.,   0.,    ! b1+(1235)
     +        54*0.,       
C f2(1270)                                                                           --> Sdv corr
     + 27., 1.27550,0.1867,-2., 8., 0.2747, 2.,  13.,   13.,   0.,   0.,   ! f2(1270)
C-   + 27., 1.27550,0.1867,-2., 1., 0.2747, 2.,  13.,   13.,   0.,   0.,   ! f2(1270)
     +                              0.5494, 2.,   2.,    3.,   0.,   0.,   ! f2(1270)
     +                              0.0770, 4.,   2.,    3.,  13.,  13.,   ! f2(1270)
     +                              0.0230, 2.,   4.,    5.,   0.,   0.,   ! f2(1270)
     +                              0.00575,2.,   6.,    6.,   0.,   0.,   ! f2(1270)
     +                              0.0115, 2.,   6.,   45.,   0.,   0.,   ! f2(1270)
     +                              0.00575,2.,  45.,   45.,   0.,   0.,   ! f2(1270)
     +                              0.0280, 4.,   2.,    3.,   2.,   3.,   ! f2(1270)
     +        12*0.,    
C f1(1285)  
     + 28., 1.2820, 0.0241,-1., 7., 0.2200, 4.,  13.,  13.,   2.,   3.,    ! f1(1285)
     +                              0.1100, 4.,   2.,   3.,   2.,   3.,    ! f1(1285)
     +                              0.3500, 3.,   2.,   3.,  14.,   0.,    ! f1(1285)
     +                              0.1600, 3.,  13.,  13.,  14.,   0.,    ! f1(1285)
     +                              0.1200, 2.,  22.,  13.,   0.,   0.,    ! f1(1285)
     +                              0.1200, 2.,  23.,   3.,   0.,   0.,    ! f1(1285)
     +                              0.1200, 2.,  24.,   2.,   0.,   0.,    ! f1(1285)
     +        18*0.,    
C eta(1295)  
     + 29., 1.29400, 0.055, 0., 5., 0.4000, 3.,   2.,   3.,  14.,   0.,    ! eta(1295) 
     +                              0.2000, 3.,  13.,  13.,  14.,   0.,    ! eta(1295) 
     +                              0.1000, 2.,  22.,  13.,   0.,   0.,    ! eta(1295) 
     +                              0.1000 ,2.,  23.,   3.,   0.,   0.,    ! eta(1295) 
     +                              0.1000 ,2.,  24.,   2.,   0.,   0.,    ! eta(1295) 
     +        30*0.,    
C a2(1320)                                                                          --> Sdv corr
     + 30., 1.31800, 0.107,-2., 6., 0.7010, 3.,   2.,   3.,  13.,   0.,    ! a2(1320) 
     +                              0.1450, 2.,  14.,  13.,   0.,   0.,    ! a2(1320) 
     +                              0.1060, 3.,  19.,   2.,   3.,   0.,    ! a2(1320)  
     +                              0.01225,2.,   6.,   6.,   0.,   0.,    ! f2(1270)
     +                              0.02450,2.,   6.,  45.,   0.,   0.,    ! f2(1270)
     +                              0.01225,2.,  45.,  45.,   0.,   0.,    ! f2(1270)     
     +        24*0., 
C a2+(1320) 
     + 31., 1.31800, 0.107,-2., 3., 0.7010, 3.,   2.,  13.,  13.,   0.,    ! a2+(1320) 
     +                              0.1450, 2.,  14.,   2.,   0.,   0.,    ! a2+(1320) 
     +                              0.1060, 3.,  19.,   2.,  13.,   0.,    ! a2+(1320)
     +        42*0., 
C f0(1370)  
     + 32., 1.37000, 0.350, 0., 3., 0.4444, 4.,   2.,    3.,   2.,   3.,    ! f0(1370) 
     +                              0.2222, 4.,   2.,    3.,  13.,  13.,    ! f0(1370) 
     +                              0.1111, 4.,  13.,   13.,  13.,  13.,    ! f0(1370) 
     +        42*0.,     
C-   + 32., 1.37000, 0.350, 0., 2., 0.5000, 2.,  17.,   18.,   0.,   0.,    ! f0(1370)->2rho
C-   +            0.2500, 2.,  16.,   16.,   0.,   0.,    ! f0(1370)->2rho
C-   +        48*0.,     
C
C pi1(1400)     
     + 33., 1.35400, 0.330,-1., 1., 1.0000, 2.,  14.,   13.,   0.,   0.,    !  pi1(1400)   
     +        54*0.,
C pi1+(1400)      
     + 34., 1.35400, 0.330,-1., 1., 1.0000, 2.,  14.,    2.,   0.,   0.,    !  pi1+(1400)    
     +        54*0.,
C eta(1405)  
     + 35., 1.40880, 0.051, 0., 7., 0.1420, 3.,  45.,   45.,  13.,   0.,    ! eta(1405) 
     +                              0.1420, 3.,   4.,    5.,  13.,   0.,    ! eta(1405) 
     +                              0.1420, 2.,  45.,   46.,   0.,   0.,    ! eta(1405) 
     +                              0.1420, 2.,   4.,   48.,   0.,   0.,    ! eta(1405) 
     +                              0.1420, 2.,   5.,   47.,   0.,   0.,    ! eta(1405) 
     +                              0.1420, 3.,  13.,   13.,  14.,   0.,    ! eta(1405)
     +                              0.1420, 3.,   2.,    3.,  14.,   0.,    ! eta(1405) 
     +        18*0.,
C f1(1420)  
     + 36., 1.42640,0.0549,-1., 3., 0.3330, 2.,  45.,   46.,   0.,   0.,    ! f1(1420) 
     +                              0.3330, 2.,   4.,   48.,   0.,   0.,    ! f1(1420) 
     +                              0.3330, 2.,   5.,   47.,   0.,   0.,    ! f1(1420)  
     +        42*0.,  
C omg(1420)   
     + 37., 1.4250, 0.2150,-1., 3., 0.3330, 2.,  16.,   13.,   0.,   0.,    ! omg(1420) 
     +                              0.3330, 2.,  17.,    3.,   0.,   0.,    ! omg(1420) 
     +                              0.3330, 2.,  18.,    2.,   0.,   0.,    ! omg(1420)  
     +        42*0.,  
C a0(1450)    
     + 38., 1.4740, 0.2650, 0., 3., 0.7010, 3.,   2.,   3.,  13.,   0.,     ! a0(1450) 
     +                              0.1450, 2.,  14.,  13.,   0.,   0.,     ! a0(1450) 
     +                              0.1060, 3.,  19.,   2.,   3.,   0.,     ! a0(1450)   
     +        42*0., 
C a0+(1450)    
     + 39., 1.4740, 0.2650, 0., 3., 0.7010, 3.,   2.,  13.,  13.,   0.,     ! a0+(1450) 
     +                              0.1450, 2.,  14.,   2.,   0.,   0.,     ! a0+(1450) 
     +                              0.1060, 3.,  19.,   2.,  13.,   0.,     ! a0+(1450)   
     +        42*0.,      
C eta(1475)  
     + 40., 1.4760, 0.0850, 0., 3., 0.1250, 3.,  45.,   45.,  13.,   0.,    ! eta(1475) 
     +                              0.2500, 3.,  45.,    6.,  13.,   0.,    ! eta(1475)
     +                              0.5000, 3.,   4.,    5.,  13.,   0.,    ! eta(1475)     
     +        42*0., 
C f0(1500)       
     + 41., 1.5040, 0.1090, 0., 6., 0.1330, 2.,  13.,   13.,   0.,   0.,    ! f0(1500)   
     +                              0.2660, 2.,  13.,   13.,   0.,   0.,    ! f0(1500) 
     +                              0.0550, 4.,  13.,   13.,  13.,  13.,    ! f0(1500) 
     +                              0.4400, 4.,   2.,    3.,   2.,   3.,    ! f0(1500) 
     +                              0.0510, 2.,  14.,   14.,   0.,   0.,    ! f0(1500) 
     +                              0.0190, 2.,  14.,   20.,   0.,   0.,    ! f0(1500)  
     +        24*0., 
C f2(1525)        
     + 42., 1.5250, 0.0730,-2., 4., 0.1109, 2.,  45.,   45.,   0.,   0.,    ! f2(1525)  
     +                              0.2218, 2.,  45.,    6.,   0.,   0.,    ! f2(1525) 
     +                              0.4435, 2.,   4.,    5.,   0.,   0.,    ! f2(1525)   
     +                              0.1040, 2.,  14.,   14.,   0.,   0.,    ! f2(1525) 
     +        36*0., 
C pi2(1670)                                                                          --> Sdv corr
     + 43., 1.6722, 0.2600,-2., 5., 0.5630, 2.,  27.,   13.,   0.,   0.,    ! pi2(1670)
     +                              0.1030, 2.,  16.,   13.,   0.,   0.,    ! pi2(1670)     
     +                              0.1030, 2.,  17.,    3.,   0.,   0.,    ! pi2(1670)    
     +                              0.1030, 2.,  18.,    2.,   0.,   0.,    ! pi2(1670)  
     +                              0.1090, 2.,  15.,   13.,   0.,   0.,    ! pi2(1670) 
     +        30*0., 
C pi2+(1670)                                                                         --> Sdv corr
     + 44., 1.6722, 0.2600,-2., 4., 0.5630, 2.,  27.,    2.,   0.,   0.,    ! pi2+(1670)
     +                              0.1550, 2.,  16.,    2.,   0.,   0.,    ! pi2+(1670)     
     +                              0.1550, 2.,  17.,   13.,   0.,   0.,    ! pi2+(1670) 
     +                              0.1090, 2.,  15.,    2.,   0.,   0.,    ! pi2+(1670)      
     +        36*0.,        
C K0s   
     + 45.,0.497614,0.0000, 0., 0., 0.6920, 2.,   2.,    3.,   0.,   0.,    !  K0s
     +                              0.3069, 2.,  13.,   13.,   0.,   0.,    !  K0s 
     +        48*0.,
C K0(892)
     + 46., 0.89166,0.0508,-1., 2., 0.4650, 2.,  45.,   13.,   0.,   0.,    !  K0(892)
     +                              0.4650, 2.,   4.,    3.,   0.,   0.,    !  K0(892)    
     +        48*0.,
C K+(892)
     + 47., 0.89166,0.0508,-1., 2., 0.4650, 2.,  45.,    2.,   0.,   0.,    !  K+(892)
     +                              0.4650, 2.,   4.,   13.,   0.,   0.,    !  K+(892)    
     +        48*0.,    
C K-(892)
     + 48., 0.89166,0.0508, 0., 2., 0.4650, 2.,  45.,    3.,   0.,   0.,    !  K-(892)
     +                              0.4650, 2.,   5.,   13.,   0.,   0.,    !  K-(892)    
     +        48*0.,
C K0(1430)
     + 49., 1.4250, 0.2700, 0., 3., 0.4650, 2.,  45.,   13.,   0.,   0.,    !  K0(1430)
     +                              0.4650, 2.,   4.,    3.,   0.,   0.,    !  K0(1430)  
     +                              0.0430, 2.,  45.,   14.,   0.,   0.,    !  K0(1430)
     +        42*0.,    
C K0+(1430)
     + 50., 1.4250, 0.2700, 0., 3., 0.4650, 2.,  45.,    2.,   0.,   0.,    !  K0+(1430)
     +                              0.4650, 2.,   4.,   13.,   0.,   0.,    !  K0+(1430)
     +                              0.0430, 2.,   4.,   14.,   0.,   0.,    !  K0+(1430)
     +        42*0.,    
C K2(1430)    
     + 51., 1.4324, 0.1090,-2., 9., 0.2500, 2.,  45.,   13.,   0.,   0.,    !  K2(1430)
     +                              0.2500, 2.,   4.,    3.,   0.,   0.,    !  K2(1430)
     +                              0.1235, 2.,  46.,   13.,   0.,   0.,    !  K2(1430)
     +                              0.1235, 2.,  47.,    3.,   0.,   0.,    !  K2(1430)
     +                              0.0335, 3.,  46.,   13.,  13.,   0.,    !  K2(1430)
     +                              0.0670, 3.,  46.,    2.,   3.,   0.,    !  K2(1430)
     +                              0.0335, 3.,  47.,    2.,  13.,   0.,    !  K2(1430)
     +                              0.0435, 2.,  46.,    6.,   0.,   0.,    !  K2(1430)
     +                              0.0435, 2.,  47.,    8.,   0.,   0.,    !  K2(1430)
     +         6*0.,
C K2+(1430)    
     + 52., 1.4324, 0.1090,-2., 9., 0.2500, 2.,  45.,    2.,   0.,   0.,    !  K2+(1430)    
     +                              0.2500, 2.,   4.,   13.,   0.,   0.,    !  K2+(1430)
     +                              0.1235, 2.,  46.,    2.,   0.,   0.,    !  K2+(1430)
     +                              0.1235, 2.,  47.,   13.,   0.,   0.,    !  K2+(1430)
     +                              0.0335, 3.,  46.,   13.,  13.,   0.,    !  K2+(1430)
     +                              0.0670, 3.,  46.,    2.,   3.,   0.,    !  K2+(1430)
     +                              0.0335, 3.,  45.,    2.,  13.,   0.,    !  K2+(1430)
     +                              0.0435, 2.,  46.,    7.,   0.,   0.,    !  K2+(1430)
     +                              0.0435, 2.,  47.,    6.,   0.,   0.,    !  K2+(1430)
     +         6*0., 
C K0(1680)    
     + 53., 1.7170, 0.3220,-1., 6., 0.1935, 2.,  45.,   13.,   0.,   0.,    !  K0(1680)
     +                              0.1935, 2.,   4.,    3.,   0.,   0.,    !  K0(1680)
     +                              0.1570, 2.,  45.,   16.,   0.,   0.,    !  K0(1680)
     +                              0.1570, 2.,   4.,   18.,   0.,   0.,    !  K0(1680)
     +                              0.1495, 2.,  46.,   13.,   0.,   0.,    !  K0(1680)
     +                              0.1495, 2.,  45.,    2.,   0.,   0.,    !  K0(1680)
     +        24*0.,
C K+(1680)    
     + 54., 1.7170, 0.3220,-1., 6., 0.1935, 2.,  45.,    2.,   0.,   0.,    !  K+(1680)  
     +                              0.1935, 2.,   4.,   13.,   0.,   0.,    !  K+(1680)
     +                              0.1570, 2.,  45.,   17.,   0.,   0.,    !  K+(1680)
     +                              0.1570, 2.,   4.,   16.,   0.,   0.,    !  K+(1680)
     +                              0.1495, 2.,  47.,   13.,   0.,   0.,    !  K+(1680)
     +                              0.1495, 2.,  46.,    2.,   0.,   0.,    !  K+(1680)
     +        24*0.,     
C K30(1780)    
     + 55., 1.7760, 0.1590,-3., 7., 0.0940, 2.,  45.,   13.,   0.,   0.,    !  K30(1780)
     +                              0.0940, 2.,   4.,    3.,   0.,   0.,    !  K30(1780)
     +                              0.1505, 2.,  45.,   16.,   0.,   0.,    !  K30(1780)
     +                              0.1505, 2.,   4.,   18.,   0.,   0.,    !  K30(1780)
     +                              0.1000, 2.,  46.,   13.,   0.,   0.,    !  K30(1780)
     +                              0.1000, 2.,  47.,    3.,   0.,   0.,    !  K30(1780)
     +                              0.3000, 2.,  45.,   14.,   0.,   0.,    !  K30(1780)
     +        18*0.,
C K3+(1780)    
     + 56., 1.7760, 0.1590,-3., 7., 0.0940, 2.,   4.,   13.,   0.,   0.,    !  K3+(1780)  
     +                              0.0940, 2.,  45.,    2.,   0.,   0.,    !  K3+(1780)
     +                              0.1505, 2.,   4.,   16.,   0.,   0.,    !  K3+(1780)
     +                              0.1505, 2.,  45.,   17.,   0.,   0.,    !  K3+(1780)
     +                              0.1000, 2.,  47.,   13.,   0.,   0.,    !  K3+(1780)
     +                              0.1000, 2.,  46.,    2.,   0.,   0.,    !  K3+(1780)
     +                              0.3000, 2.,   4.,   14.,   0.,   0.,    !  K3+(1780)
     +        18*0.,     
C rho3(1690) 
     + 57., 1.6888, 0.1610,-3., 6., 0.2233, 4.,   2.,    3.,  13.,  13.,    ! rho3(1690)  
     +                              0.4466, 4.,   2.,    3.,   2.,   3.,    ! rho3(1690)     
     +                              0.1600, 2.,  19.,   13.,   0.,   0.,    ! rho3(1690) 
     +                              0.2360, 2.,   2.,    3.,   0.,   0.,    ! rho3(1690)    
     +                              0.0190, 3.,   4.,    5.,  13.,   0.,    ! rho3(1690)    
     +                              0.0190, 3.,  45.,    6.,  13.,   0.,    ! rho3(1690)    
     +        24*0.,  
C rho3+(1690) 
     + 58., 1.6888, 0.1610,-3., 6., 0.2233, 4.,   2.,   13.,  13.,  13.,    ! rho3+(1690)  
     +                              0.4466, 4.,   2.,    2.,   3.,  13.,    ! rho3+(1690)    
     +                              0.1600, 2.,  19.,    2.,   0.,   0.,    ! rho3+(1690) 
     +                              0.2360, 2.,   2.,   13.,   0.,   0.,    ! rho3+(1690)   
     +                              0.0190, 3.,   4.,   45.,  13.,   0.,    ! rho3+(1690)   
     +                              0.0190, 3.,  45.,    2.,  13.,   0.,    ! rho3+(1690)
     +        24*0.,  
C phi(1680) 
     + 59., 1.6800, 0.1500,-1., 4., 0.2500, 2.,   4.,   13.,   0.,   0.,    ! phi(1680) 
     +                              0.2500, 2.,   4.,    5.,   0.,   0.,    ! phi(1680) 
     +                              0.1250, 2.,  46.,   45.,   0.,   0.,    ! phi(1680) 
     +                              0.1250, 2.,  46.,    6.,   0.,   0.,    ! phi(1680) 
     +        36*0.,    
C omg(1650) 
     + 60., 1.6700, 0.3150,-1., 2., 0.3333, 3.,  19.,   13.,  13.,   0.,    ! omg(1650)
     +                              0.6666, 3.,  19.,    2.,   3.,   0.,    ! omg(1650)
     +        48*0.,                                                        ! omg(1650)
C omg+(1650) 
     + 61., 1.6700, 0.3150,-1., 1., 1.0000, 3.,  19.,   13.,   2.,   0.,    ! omg+(1650)
     +        54*0.,                                                        ! omg+(1650)      
C omg3(1670) 
     + 62., 1.6670, 0.1680,-3., 2., 0.3333, 3.,  19.,   13.,  13.,   0.,    ! omg3(1650)
     +                              0.6666, 3.,  19.,    2.,   3.,   0.,    ! omg3(1650)
     +        48*0.,                                                        ! omg3(1650)
C omg3+(1670) 
     + 63., 1.6670, 0.1680,-3., 1., 1.0000, 3.,  19.,   13.,   2.,   0.,    ! omg3+(1650)
     +        54*0.,     
C PS(pi0pi0)
     + 64., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  13.,   13.,   0.,   0.,    !  PS(pi0pi0)
     +        54*0.,
C PS(pi0pi+)
     + 65., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  13.,    2.,   0.,   0.,    !  PS(pi0pi+)
     +        54*0.,
C PS(etapi0)
     + 66., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  14.,   13.,   0.,   0.,    !  PS(etapi0)
     +        54*0.,
C PS(etapi+)
     + 67., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  14.,    2.,   0.,   0.,    !  PS(etapi+)
     +        54*0., 
C PS(omgpi0)
     + 68., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  19.,   13.,   0.,   0.,    !  PS(omgpi0)
     +        54*0.,
C PS(omgpi+)
     + 69., 0.0000, 2.6000, 0., 1., 1.0000, 2.,  19.,    2.,   0.,   0.,    !  PS(omgpi+)
     +        54*0., 
C PS(3i0)
     + 70., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  13.,   13.,  13.,   0.,    !  PS(3i0)
     +        54*0., 
C PS(pi0pi+pi-)
     + 71., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  13.,    2.,   3.,   0.,    !  PS(pi0pi+pi-)
     +        54*0., 
C PS(2pi0pi+)
     + 72., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  13.,   13.,   2.,   0.,    !  PS(2pi0pi+)
     +        54*0., 
C PS(eta2pi0)
     + 73., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  14.,   13.,  13.,   0.,    !  PS(eta2pi0)
     +        54*0.,  
C PS(etapi+pi-)
     + 74., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  14.,   2.,    3.,   0.,    !  PS(etapi+pi-)
     +        54*0.,  
C PS(etapi0pi+)
     + 75., 0.0000, 2.6000, 0., 1., 1.0000, 3.,  14.,   13.,   3.,   0.,    !  PS(etapi0pi+)
     +        54*0.,        
     +      1625*0.  / 
C...........................................................................................
      save    N_dec ,N_dec2,N_dec3,N_dec4,N_dec5,jps,jp2,jp3,jp4
      save    IparSc,IparS2,IparS3,IparS4
      save    jd,jdc,j2,jd2,j3,jd3,j4,jd4,R0,R1,R2,R3,R4
      save    Start,Pbeam
      logical Start
      data    Start /.true./
C
      if (start) then
         start  =.false.
         Pbeam  = BeamMomentum  !  Beam momentum GeV/c
         Ireac1=i1
         Ireac2=i2
         Ievent= 0
C
         call Init_RegGen       ! Reading RegGen.cards 
         call init_reactns    
         call init_partcls

         call trapfpe           ! enable floating point exception
C
C        randomize generator
         x=regrndm(iseed)

         write(*,*) 
         write(*,*) 'RegGenevent, Beam=', Pbeam, 'GeV/c', Ireac1,Ireac2,'Iseed=',Iseed
         write(*,*) '================================================================='
         write(*,*)
      endif
C
      Ievent  =  Ievent+1
C-    if (Ievent.eq.(Ievent/1000)*1000) write(*,*) 'Event =', Ievent
C  ------------------------------------------------------------------
C      
C-    write(*,*)
C-    write(*,*) Ireac, React(2,1)
C-    write(*,*) ChrSt
C-    write(*,*) IcdSt
C-    write(*,*) AmsSt
C-    write(*,*)
C 
      R0 = regrndm(0)
C-    write(*,*) Ievent,R0
      do Jr = Ireac1,Ireac2      ! the main reaction cycle with probability
      if(R0.le.React(2,jr)) then 
                            Jrec = Jr
C
      if(Jrec.le.Mcarlo) then
C-                       write(*,*) 'Jrec,Nchanel=>',Ievent,Nchanel 
                         call hyp_event(Pbeam,Jrec,Nchanel,Ngamma,Pout)
			 IstOut = Ngamma 
                         return
		  endif
C
      Ireac = int(React(1,Jrec))
      Ibeam = int(React(3,Jrec))
      Itarg = int(React(4,Jrec))
      IparC = int(React(5,Jrec))
      IparD = int(React(6,Jrec))
      N_Reg = int(React(7,Jrec))
C
C-    write(*,*) 'Reaction:', Jrec, Ireac, Itarg, IparC, IparD
C-    write(*,*)
C      
C Beam:
C
C-    sigP = 0.070      ! Momentum distortion there is corr_2 below
C-    sigP = 0.140      ! Momentum distortion there is corr_2 below
      sigP = 0.210      ! Momentum distortion there is corr_2 below
   20 rndG  = rnd_gauss(1.)
      if(abs(rndG).gt.3.0) go to 20
C
      Pa(5) = AmsSt(Ibeam)      
      Pa(1) = 0.
      Pa(2) = 0.
Csdv- Pa(3) = Pbeam
      Pa(3) = Pbeam + sigP*rndG ! Momentum distortion, there is correct_2 below
      Pa(4) = Dsqrt(Pa(5)**2 + Pa(1)**2 + Pa(2)**2 + Pa(3)**2)
C
C Target:
C
      Pb(5) = AmsSt(Itarg)    
      Pb(1) = 0.
      Pb(2) = 0.
      Pb(3) = 0.
      Pb(4) = Dsqrt(Pb(5)**2 + Pb(1)**2 + Pb(2)**2 + Pb(3)**2)
C
C-    write(*,*) Ievent,'Pa =', Pa
C-    write(*,*) Ievent,'Pb =', Pb       
C
      S=(Pa(4)+Pb(4))**2-(Pa(1)+Pb(1))**2-(Pa(2)+Pb(2))**2
     +                                   -(Pa(3)+Pb(3))**2
C-    write(*,*) Jrec, 'S=', S
C
      IstOut = 0          !   Output stable particle index
C   ---------------------------------------------------------   
C
C Particle C
C
   50 if(IparC.le.Nreson) then
         Amas  =     Part(2,IparC)
         Width =     Part(3,IparC) 
         Jspn  = int(Part(4,IparC))
C-       write(*,*) 'IparC:', IparC,Amas,Width,Jspn               
         if (Width.le.0.) then
            Pc(5) =Amas
         else if (Jspn.le.0) then
            call BW_rand(Amas, Width, BW_mass) !   C = BW resonance
            Pc(5) = BW_mass
C-          write(*,*) 'BW_rand:',Amas, Width, BW_mass
         else
            call BW_Spin(Amas, Width, Jspn, BW_mass) 
            Pc(5) = BW_mass
         endif
      else
C-       call PS_distrib((IparC,PS_mass)          
C-       Pc(5) = PS_mass
      endif
C        
C-      write(*,*) 'IparC BW =', IparC, Pc(5)
C
C T-distribution
C
      if(N_Reg.gt.0) call ReggeT(N_Reg,React(8,Jrec),S,T,IRegg)
C
      IndxEvn = 1000000*Ireac + 100000*IRegg
C
C Particle D
C
      if(IparD.gt.0) then
                     Pd(5) = AmsSt(IparD)        !   D = Stable partice
               else
C-----------   call inclusive(IparD,T,Amiss)     !   D = inclusive: T & MisMass 
               Pd(5) = Amiss
               endif
C
      call abtocds(Pa,Pb(5),Pc,Pd,T)
C-    write(*,*) 'T =',T
C-    write(*,*) 'Pc=', Pc

      if (T.gt.0.) go to 50
C
      if (IparD.gt.0) then
                      IstOut = IstOut+1
                         do j=1,5
                         Pout(j,IstOut) = Pd(j) 
                         enddo 
C                        
                      do j=6,8
                      Pout(j,IstOut) = 0
                      enddo    
                      Pout( 9,IstOut) = IcdSt(IparD)  !  PDG code
                      Pout(10,IstOut) = IndxEvn + 4   !  D particle index in event
                endif
C
      N_dec = int(Part(5,IparC))
      if (N_dec.eq.0) then 
                      IstOut = IstOut+1
                      do j=1,5
                      Pout(j,IstOut) = Pc(j) 
                      enddo 
C                        
                      do j=6,8
                      Pout(j,IstOut) = 0
                      enddo    
                      Pout( 9,IstOut) = IcdSt(IparC)  !  PDG code
                      Pout(10,IstOut) = IndxEvn + 3   !  C particle index in event
      else
C
      R1 = regrndm(0)
      do jd = 1,N_dec               !  Cycle over decays of particle  C with probability
      
C-    write(*,*) 'R1=',jd,R1,Part(6*jd,IparC)
      
      if (R1.le.Part(6*jd,IparC)) then 
                                  jdc = jd      
C-           write(*,*) 'R1=',jd,R1,Part(6*jd,IparC),jdc            
C        
      jdec  = 5+6*(jdc-1)+2
      N_sec = int(Part(jdec,IparC))      !  Number of the secondary particls in decay of particle IparC
C      
      call decayP(IparC,N_sec,jdec,Pc,Pdec,Ierror)
      if (Ierror.ne.0) go to 500
  
C-    write(*,*) 'After decayP:',IparC,jdc,N_sec
C-    write(*,*)  Pc
C-    write(*,*) 
C-    do kk=1,N_sec
C-    write(*,*) (Pdec(jj,kk), jj=1,5)
C-    write(*,*) (Pdec(jj,kk), jj=6,10)
C-    write(*,*) 
C-    enddo
C-    write(*,*)            
C ................................................................................     
      do jps = 1,N_sec 
      IparSc = int(Part(jdec+jps,IparC)) !  Particle IparSc
      N_dec2 = int(Part(5,IparSc))       !  Number of secondary particls in decay of particle IparSc
C      
C-    write(*,*) 'IparC,jpss=',IparC,jdc,jps,IparSc,N_dec2,IcdSt(IparSc)

      if (N_dec2.eq.0) then
                       IndxPrt= IndxEvn + 1000*jdc + jps
                       IstOut = IstOut+1
                          do j=1,5
                          Pout(j,IstOut) = Pdec(j,jps) 
                          enddo      
C  
                       do j=6,8
                       Pout(j,IstOut) = 0.
                       enddo    
                       Pout( 9,IstOut) = IcdSt(IparSc)   !  PDG code
                       Pout(10,IstOut) = IndxPrt         !  particle indx
C
Cjdc:  
C-    write(*,*)'jps',jdc,jps,IparSc,IstOut,IcdSt(IparSc),Pout(4,IstOut)

      else
C
C-    write(*,*) 'N_dec2 ==', IparSc,N_dec2
      
      R2 = regrndm(0)
      do j2=1,N_dec2
            
      if (R2.le.Part(6*j2,IparSc)) then 
                                   jd2 = j2
      jdec2 = 5+6*(jd2-1)+2
      N_sec2= int(Part(jdec2,IparSc))
      
C-    write(*,*) 'jd2,N_sec2=',IparSc,jd2,jdec2,N_dec2,N_sec2
C      
      call decayP(IparSc,N_sec2,jdec2,Pdec(1,jps),Pdc2,Ierror) 
C-    write(*,*) (Pdc2(5,kk),kk=1,N_sec2)
      if (Ierror.ne.0) go to 500
C
C     write(*,*)
C-    write(*,*) 'jd2 =',jd2, jdec2, N_sec2
C...................................................................................        
      do jp2=1,N_sec2
      IparS2 = int(Part(jdec2+jp2,IparSc))
      N_dec3 = int(Part(5,IparS2))
C  
C-    write(*,*) 'jdc,jps=', jdc,jps,IparSc,N_dec2,IstOut,IcdSt(IparSc)
C-    write(*,*) 'jp2=',jd2, jp2, N_sec2, IparS2, N_dec3, IcdSt(IparS2)      
C      
      if (N_dec3.eq.0) then
                       IndxPrt= IndxEvn + 1000*jdc + 100*jd2+jp2
                       IstOut = IstOut+1
                          do j=1,5
                          Pout(j,IstOut) = Pdc2(j,jp2) 
                          enddo        
C
                       do j=6,8
                       Pout(j,IstOut) = 0.
                       enddo    
                       Pout( 9,IstOut) = IcdSt(IparS2)   !  PDG code
                       Pout(10,IstOut) = IndxPrt         !  particle indx

C-    write(*,*)'jp2',jd2,jp2,IparS2,IstOut,IcdSt(IparS2),Pout(4,IstOut)
      else
C      
      R3 = regrndm(0)
      do j3=1,N_dec3
      if (R3.le.Part(6*j3,IparS2)) then 
                                   jd3 = j3
      jdec3 = 5+6*(jd3-1)+2
      N_sec3= int(Part(jdec3,IparS2))
C 
      call decayP(IparS2,N_sec3,jdec3,Pdc2(1,jp2),Pdc3,Ierror) 
      if (Ierror.ne.0) go to 500
      
C-    write(*,*) 'After jd3:', jd3, IparS2, N_sec3 
C...................................................................................     
      do jp3=1,N_sec3
      IparS3 = int(Part(jdec3+jp3,IparS2))
      N_dec4 = int(Part(5,IparS3))          !  Number of secondary particls in decay of particle IparS3
C
C-    write(*,*) 'Loop jps, jp3:', jps, jp3, IparS3, N_dec4

C
      if (N_dec4.eq.0) then
                       IndxPrt= IndxEvn + 1000*jdc + jps
                       IstOut = IstOut+1
                          do j=1,5
                          Pout(j,IstOut) = Pdc3(j,jp3) 
                          enddo  
C      
                       do j=6,8
                       Pout(j,IstOut) = 0.
                       enddo    
                       Pout( 9,IstOut) = IcdSt(IparS3)   !  PDG code
                       Pout(10,IstOut) = IndxPrt         !  particle indx
                       
C-    write(*,*)'jp3',jd3,jp3,IparS3,IstOut,IcdSt(IparS3),Pout(4,IstOut)
      else
C      
      R4 = regrndm(0)
      do j4=1,N_dec4
      if (R4.le.Part(6*j4,IparS3)) then 
                                   jd4 = j4     
      jdec4 = 5+6*(jd4-1)+2
      N_sec4= int(Part(jdec4,IparS3))
C
C-    write(*,*) 'Before jd4:', jd4, N_sec4 
      call decayP(IparS3,N_sec4,jdec4,Pdc3(1,jp3),Pdc4,Ierror) 
      if (Ierror.ne.0) go to 500
C...................................................................................    
      do jp4=1,N_sec4
      IparS4 = int(Part(jdec4+jd4,IparS3))
      N_dec5 = int(Part(5,IparS4))
C  
C-    write(*,*) 'jp4=', jp4, IparS4, N_dec5
C
      if (N_dec5.eq.0) then
                       IndxPrt= IndxEvn + 1000*jdc + 100*jd2+jp2
                       IstOut = IstOut+1
                          do j=1,5
                          Pout(j,IstOut) = Pdc4(j,jp4) 
                          enddo 
C       
                       do j=6,8
                       Pout(j,IstOut) = 0
                       enddo    
C-                     write(*,*) jp4, IcdSt(IparS4)
                       Pout( 9,IstOut) = IcdSt(IparS4)   !  PDG code
                       Pout(10,IstOut) = IndxPrt         !  particle indx
      else
C  
      stop'Error in Part table'
C    
      do jd5=1,N_dec5
      jdec5 = 5+6*(jd5-1)+2
      N_sec5= int(Part(jdec5,IparS4))
C      
      call decayP(IparS4,N_sec5,jdec5,Pdc4(1,jp4),Pdc5,Ierror) 
      if (Ierror.ne.0) go to 500
      enddo  ! jd5
C      
      endif  ! N_dec5
      enddo  ! jp4   
C...................................................................................  
C    
      go to 100
      endif  ! jd4
      enddo  ! j4 
C
  100 md4 = jd4          
      endif  ! N_dec4       
      enddo  ! jp3
C      
      go to 200
      endif  ! jd3
      enddo  ! j3 
      
  200 md3 = jd3    
      endif  ! N_dec3     
      enddo  ! jp2
C      
      go to 300
      endif  ! jd2
      enddo  ! j2 
C      
  300 md2 = jd2 
C-    write(*,*) 'jd2 =',jd2
      endif      
      enddo  ! jps
C     
      go to 400
      endif  ! jdc
      enddo  ! jd 
      endif  ! IparC = stable
C      
  400 mdc = jdc
C-    write(*,*) 'jdc =',jdc
C
C --- Output ---
C
  500 continue
C-    write(*,*) 
C     if (Ierror.eq.1) then
C                IstOut = 0
C                write(*,*)
C                write(*,*) 'Error event: Jrec, IstOut =', Jrec, IstOut
C         else        
C         write(*,*) 'Nb of final particles: Jrec, IstOut =',Jrec,IstOut
C         do k=1,IstOut
C-        write(*,*) k, (Pout(j,k),j=1,5)
C         write(*,*) k, (Pout(j,k),j=6,10)
C-        write(*,*)
C         enddo  
C      endif
      return
C
      endif ! Jrec probability
      enddo ! Jrec
      RETURN
      END   
C      
      subroutine event_print(Lun,Ievent,Ierror,Jrec,IstOut,Pout)
      double precision Pout(10,500)
C-    common/MC_event/ Ievent,Ierror,Jrec,IstOut,Pout(10,500)
C
      write(*,*) 'Event_print: Ievent,Ierror =',Ievent,Ierror,IstOut
      if (Ierror.ne.0) then
		 IstOut = 0
		 write(*,*)
		 write(*,*) 'Error event: Jrec, IstOut =',Jrec,IstOut
		 else	      
	 write(*,*) 'Nb final particles: Jrec, IstOut =',Jrec,IstOut
	 do k=1,IstOut
	 write(*,*) k, (Pout(j,k),j=1,5)
	 write(*,*) k, (Pout(j,k),j=6,10)
	 write(*,*)
	 enddo
      endif
      return
      end
C
      subroutine Init_RegGen
      common/rections/ Ireac1, Ireac2, Mcarlo, React(10,100)
      common/secondaris/Npart, Nreson, Part(65,100)
      integer      Mreac(2,100,5) 
      character*26 head
      character*4  hmes,mes(5)
      character*26 file_version
      dimension Prob(2,100),PartCor(65)
C      
      data mes / 'pi0', 'eta', 'omg', 'K0s', 'f2 '/  
      data LunCards / 77 /
C
      write(*,*)
      write(*,*) '---=== RegGen Generator initialisation ===---'
      write(*,*)
C
      open(unit=LunCards,file='RegGen.cards',form='formatted',Err=100) 
C
      read(LunCards,*) head, file_version         ! ;kondr
      write(*,*) "RegGen cards id: ", file_version
      read(LunCards,*) head,reac1,reac2
      Ireac1 = reac1
      Ireac2 = reac2
      write(*,*) 'Reactions to generate:    ',Ireac1,Ireac2     
C
      read(LunCards,*) head,Nreact
      write(*,*)       head,Nreact
C-    write(*,*) head(1:4)
C                         --- Read reaction probabilities ---
C
      read(LunCards,*)((Prob(j,k),j=1,2),k=1,Nreact)
      do m=0,Nreact/5
      write(*,10)     ((Prob(j,5*m+k),j=1,2),k=1,5)
      enddo  
      write(*,*) 
C                         --- Apply reaction probabilities ---
      do j=1,Nreact
      ir = Prob(1,j)
      React(2,ir) = Prob(2,ir)*React(2,ir)
      enddo
C                         --- Particle Decay correction ---
C 
      read(LunCards,*) head,NpartCor 
      write(*,*)       head,NpartCor 
      do j=1,NpartCor
      read (LunCards,*) head
      write(*,*)        head
      read (LunCards,*)(PartCor(k),k=1,11)
      Ndecay = PartCor(5)
      if (Ndecay.gt.1) then
                       do i=2,Ndecay
                       ii =-1+i*6 
                       read(LunCards,*)(PartCor(ii+k),k=1,6)
                       enddo
      endif
C
C     --- Apply particle decay corrections ---
C
          Ipart = PartCor(1)
          do k=1,5+6*Ndecay
          Part(k,Ipart) = PartCor(k)
          enddo
C
C-    write(*, *) head(3:13)
      write(*,20)(Part(k,Ipart),k=1,11)
      do i=2,Ndecay
      ii =-1+i*6 
      write(*,25)(PartCor(ii+k),k=1,6)
      enddo
      enddo  
C           
C     --- Inclusive cards reading ---
C
      read (LunCards,*) head
      write(*,*) head
C
      do inc=1,5
      read (LunCards,*,err=40,end=40) head
      do jj=1,5         
      if(head(3:4).eq.mes(jj)(1:2)) go to 50
      enddo
   40 write(*,*) 'Erros in inclusive cards reading'
      stop'Error: incl cards'
C      
   50 write(*,*)
      write(*,*) jj,head(3:5),':'
      irr = jj  
      read (LunCards,*) ((Mreac(i,k,irr),i=1,2),k=1,Nreact)
      write(*,30) ((Mreac(i,k,irr),i=1,2),k=1,Nreact)     
      enddo
      
      read (LunCards,*) head,hmes
      write(*,*) head,hmes,'e ==> go to exclusive reactions'
      write(*,*) '.............................................................'
C-    write(*,*) hmes
C 
      do jj=1,5 
      if (hmes(1:2).eq.mes(jj)(1:2)) go to 60
      enddo
      write(*,*)
      write(*,*) 'Exclusive generation of reactions:',Ireac1,Ireac2 
      write(*,*) '============================================================='
      write(*,*)
      go to 70
      
   60 irr = jj
      write(*,*)
      write(*,*) mes(irr)(1:3),' inclusive generation'  
C      
      write(*,*) 'Reaction channels:'
      do j=1,Nreact
      if (Mreac(2,j,irr).gt.0) then
      write(*,*) 'Jreac =',j, Mreac(1,j,irr),'  Flag=',Mreac(2,j,irr)
      endif  
      enddo             
      write(*,*) '....................................................'
      write(*,*)
C
      write(*,*) 'Used reaction probabilities'
C      
      do j=1,Nreact
      write(*,*) 'Prob, Jreac =',j,React(2,j),float(Mreac(2,j,irr))
      React(2,j)= React(2,j)*float(Mreac(2,j,irr))
      enddo    
      write(*,*)  
   70 continue   
C           
      close(LunCards)
      return
C
  100 write(*,*) '<*** NO RegGen.cards ***>'
   10 format(5(F5.1,2x,F11.9))
   20 format(F6.0,2F10.7,2F4.1, F8.5, 5F5.1)
   25 format(34x,               F8.5, 5F5.1)
   30 format(10(2i3,3x))
      return
      end
C       
      subroutine init_reactns
      common/rections/ Ireac1, Ireac2, Mcarlo, React(10,100)
C
      write(*,*) 'Reaction numbers:', Ireac1, Ireac2

      PbSum = 0.
      do jrec = Ireac1,Ireac2
         Prob = React(2,jrec)
         if (Prob.gt.0.) PbSum = PbSum + React(2,jrec)
      enddo
C           
      PbNorm  = 0.
      do jrec = Ireac1,Ireac2
         Prob = React(2,jrec)
         if (Prob.gt.0.) then
                         PbNorm = PbNorm+Prob/PbSum
                  else
                  write(*,*) 'Jrec deleted =',jrec
             endif
C        
      React(2,jrec) = PbNorm
      write(*,*) 'Jrec, Prob =',jrec,React(2,jrec)
      enddo
C      
      return
      end
C       
      subroutine init_partcls      
      CHARACTER*5 ChrSt 
      common/stable_part/ ChrSt(45), IcdSt(45), AmsSt(45) 
C
      real Part
      common/secondaris/Npart, Nreson, Part(65,100)
C
      write(*,*)
      write(*,*) 'Particles:'
      do jpar=1,Npart     
      PbSum = 0.
      Ndec  = int(Part(5,jpar))
      if (Ndec.gt.0) then
                     do j = 1,Ndec
                     Prob = Part(6*j,jpar) 
                     if (Prob.gt.0.) PbSum = PbSum + Prob
               enddo
          else
          write(*,*) 'Particle, Stable, jpar=', jpar, ChrSt(jpar)            
      endif
C
      PbNorm=0.      
      do j = 1,Ndec
      Prob = Part(6*j,jpar) 
      if (Prob.gt.0.) PbNorm = PbNorm + Prob/PbSum
      Part(6*j,jpar)= PbNorm
      write(*,*) 'Particle, Decay, Prob.=', jpar, j, Part(6*j,jpar)
      enddo
      write(*,*)
      enddo ! jpar        
C         
      return
      end
C        
      subroutine BW_Spin(Amas, Rwid, Jspn, BW_mass) 
      real Amas, Rwid, BW_mass
C      
      if (Jspn.eq.1) then
         call BW_rand_omg(Amas, Rwid, BW_mass)
      else if (Jspn.eq.2) then
         call BW_rand_f2(Amas*1000., Rwid*1000., BW_mass) ! GeV -> MeV
         BW_mass=BW_mass/1000.                            ! MeV -> GeV
      else
      write(*,*) 'BW_Spin: error in Jspn =',Jspn 
      stop 'BW_Spin error'
      endif
      return
      end
C 
      subroutine ReggeT(N_Reg,React,S,T,IRegg)
      real React(3)
      REAL REGRNDM
      double precision S,T
C
      real Alog, alpha
      common/trajectory/ Ntrajec,alpha(5,2)
      data Ntrajec,alpha/   10, 
C       pi     rho      b1      a2       K*    a1   rho2 
     + 0.040, 0.570,  0.000,  0.370,   0.330,         !  alpha0
     + 0.920, 0.920,  0.800,  0.980,   0.820 /        !  alpha1
C     
      IRegg = 0
      do jreg = 1,3
      Ireg2 = int(React(jreg))
C      
      if (N_Reg.eq.Ireg2) then
                          IRegg = Ireg2
                          alpha0= alpha(IRegg,1)
                          alpha1= alpha(IRegg,2)
                          go to 10
                   endif           
      enddo
C
   10 T = Alog(regrndm(0))/(2.*alpha1*Dlog(S))     
      return
      end      
C      
      subroutine decayP(IparC,N_sec,Jdec,Pc,Pdec,Ierror) 
      implicit double precision (A-H,O-Z)  
      dimension Pc(5),Pdec(10,5)
C
      real Part, Amas, Width, BW_mass
      common/secondaris/Npart, Nreson, Part(65,100)
C
      Ierror = 0
      AsumSt = 0.
   10 do jps=1,N_sec                  ! Secondary particle number in decay of jdec
      IparSc=int(Part(Jdec+jps,IparC))
C      
      if(IparSc.le.Nreson) then
         Amas  =     Part(2,IparSc)
         Width =     Part(3,IparSc) 
         Jspn  = int(Part(4,IparSc))
         if (Width.le.0.) then
            Pdec(5,jps) = Amas
            AsumSt = AsumSt+Amas
C           write(*,*) IparC,Amas,Width,Jspn,AsumSt
         else if (Jspn.le.0) then
            call BW_rand(Amas, Width, BW_mass) !    BW resonance
            Pdec(5,jps) = BW_mass
C-          write(*,*) 'BW_mass=',jps,Pdec(5,jps)
         else
            call BW_Spin(Amas, Width, Jspn, BW_mass)
            Pdec(5,jps) = BW_mass 
         endif 
      endif      
      enddo
C
      if (AsumSt.ge.Pc(5)) then
         Ierror = 1
         return
      endif
C
      AmaSm = Pdec(5,1)
      do j=2,N_sec
         AmaSm = AmaSm+Pdec(5,j)
      enddo
      
C-    write(*,*) 'AmaSm=', IparC, ii, AmaSm, Pc(5)
      
      if(AmaSm.gt.Pc(5)) go to 10
C      
      if (N_sec.eq.2) then 
         CALL DECAYS(Pc,Pdec(1,1),Pdec(1,2)) 
      else if(N_sec.eq.3) then
         CALL STAR3T(Pc,Pdec(1,1),Pdec(1,2),Pdec(1,3))
      else 
         CALL STAR4M(Pc,Pdec(1,1),Pdec(1,2),Pdec(1,3),Pdec(1,4))
      endif
C
      return
      end
C   C
      subroutine BW_rand_evd(Rmas, Rwid, rnd_BW)
C     -    Breit-Wigner random number generator     S.Evdokimov 26.09.2012
C     generate resonance in mass limits (135MeV : 2000MeV)
      real Rmas, Rwid, rnd_BW, BW,BW_max
 10   rnd_BW=135.+1865.*regrndm(0)
      BW=rnd_BW*Rwid/((rnd_BW**2-Rmas**2)**2+(rnd_BW*Rwid)**2)
      BW_max=1./(Rmas*Rwid)
      if(BW.lt.BW_max*regrndm(0))goto 10
      return
      end
c
      subroutine BW_rand(Rmas, Rwid, rnd_BW)
C-    Breit-Wigner random number generator:         S.Sadovsky 17.08.2011
      real Rmas, Rwid, rnd_BW
      data pi / 3.141592653589 /
C
 10   continue
      phi = pi*(regrndm(0)-0.4999)
      rnd_BW = Rmas*Rmas + Rmas*Rwid*tan(phi)
      if (rnd_BW.gt.0.) then
         rnd_BW = sqrt(rnd_BW)
      else
         go to 10
      endif                        
      return
      end
C
      subroutine BW_rand_f2(Rmas, Rwid, rnd_BW)
C-    Breit-Wigner random number generator for f2:  S.Sadovsky 17.08.2011
C-    Eur.Phys.J. A3, 361-371 (1998)
C 
      save Ampi2, BWnorC, BWnorGAMS
      data Ampi2, BWnorC, BWnorGAMS /  270.0,  205.0, 0.02613 / ! BW normalizations for f2 
C-    data Rmas, Rwid        / 1275.5, 186.7 /        ! f2 parameters, not used here
C
   10 call BW_rand(Rmas, Rwid, X_mas)
      if(X_mas.lt.Ampi2) go to 10                     ! 2pi0 channel threshold
      if(X_mas.gt.2500.) go to 10 
      BW_class =   BWnorC   *BW_fun    (Rmas, Rwid, X_mas)    
      BW_gams  =   BWnorGAMS*BW_f2_gams(Rmas, Rwid, X_mas) 
      BW_gams  = 0.50*BW_gams
      if (BW_class*regrndm(0).gt.BW_gams) go to 10  
      rnd_BW   =   X_mas
      return
      end
C
      subroutine BW_rand_f0(Rmas, Rwid, rnd_BW)
C-    Breit-Wigner random number generator for f0:  S.Sadovsky 14.12.2015
C-    Eur.Phys.J. A3, 361-371 (1998)
C
      save Ampi2, BWnorC, BWnorGAMS
      data Ampi2, BWnorC, BWnorGAMS /  270.0,  205.0, 0.02613 / ! BW normalizations for f2
C-    data Rmas,  Rwid        / 500.0, 550.0  / ! f0 parameters, not used here
C
 10   call BW_rand(Rmas, Rwid, X_mas)
      if (X_mas.lt.Ampi2) go to 10                          ! 2pi0 channel threshold
      BW_class =   BWnorC   *BW_fun    (Rmas, Rwid, X_mas)
      BW_gams  =   BWnorGAMS*BW_f0_gams(Rmas, Rwid, X_mas)
      BW_gams  = 0.25*BW_gams
      if (BW_class*regrndm(0).gt.BW_gams) go to 10
      rnd_BW   =   X_mas
      return
      end 
C
      function BW_f0_gams(Rmas, Rwid, X)
C     The GAMS relativistic BW function for f0:    S.Sadovsky 14.12.2015
C     Eur.Phys.J. A3, 361-371 (1998)
C     Input:   X    - 2pi0 mass in MeV
C              Rmas - resonanse mass  in MeV
C              Rwid - resonanse width in MeV
C
      data Ampi0, r0  /  134.9766, 197.326      /  ! pi0 mass and r0 (in 1/MeV)
C-    data Rmas, Rwid /  500.0, 550.0 /            ! f0 parameters in MeV, not used here
C
      ppi0  = sqrt(abs((Rmas/2.)**2-Ampi0**2))
      ppiX  = sqrt(abs((X/2.)**2   -Ampi0**2))
C
C-    D2pi0 = 9.+3.*(ppi0/r0)**2+(ppi0/r0)**4      ! for f2 --> not used for f0 (sigma)
C-    D2piX = 9.+3.*(ppiX/r0)**2+(ppiX/r0)**4      ! for f2 --> not used for f0 (sigma)
C
C-    Gamma = Rwid*(ppiX/ppi0)**5*D2pi0/D2piX      ! for f2
      Gamma = Rwid*(ppiX/ppi0)                     ! for f0 (sigma)
C
      BW    = Rmas**2*Gamma**2/((x*x-Rmas**2)**2+(Rmas*Gamma)**2)
      BW_f0_gams = Bw*X**2/ppiX
      return
      end 
C
      function BW_f2_gams(Rmas, Rwid, X)
C     The GAMS relativistic BW function for f2:      S.Sadovsky 17.08.2011 
C     Eur.Phys.J. A3, 361-371 (1998)
C     Input:   X    - 2pi0 mass in MeV
C              Rmas - resonanse mass  in MeV
C              Rwid - resonanse width in MeV
C
      data Ampi0, r0  /  134.9766, 197.326      /  ! pi0 mass and r0 (in 1/MeV)
C-    data Rmas, Rwid / 1275.1, 185.1 /            ! f2 parameters in MeV, not used here
C                                                                     
      ppi0  = sqrt(abs((Rmas/2.)**2-Ampi0**2))
      ppiX  = sqrt(abs((X/2.)**2   -Ampi0**2))
C     
      D2pi0 = 9.+3.*(ppi0/r0)**2+(ppi0/r0)**4      ! Blatte-Weiskopf factor for f2
      D2piX = 9.+3.*(ppiX/r0)**2+(ppiX/r0)**4
C
      Gamma = Rwid*(ppiX/ppi0)**5*D2pi0/D2piX                  
      BW    = Rmas**2*Gamma**2/((x*x-Rmas**2)**2+(Rmas*Gamma)**2)
      BW_f2_gams = Bw*X**2/ppiX
      return
      end 
C
      function BW_fun(Rmas, Rwid, X)
C     The classical relativistic BW function:  S.Sadovsky 17.08.2011
C                 
      BW_fun= X*Rmas*Rwid**2/((X*X-Rmas**2)**2+(Rmas*Rwid)**2)
      return
      end   
C      
      subroutine BW_rand_omg(Rmas, Rwid, rnd_BW)
C-    Breit-Wigner random number generator for omega:  S.Sadovsky 17.08.2011
C-    Eur.Phys.J. A3, 361-371 (1998)
C 
      save BWnorC, BWnorGAMS
      data BWnorC, BWnorGAMS /   1.00, 2.613E-4/ ! BW normalizations for omega
C-    data Rmas, Rwid        / 782.65, 8.49    / ! omg parameters, not used here
C
   10 call BW_rand(Rmas, Rwid, X_mas)
      BW_class =   BWnorC   *BW_fun     (Rmas, Rwid, X_mas)    
      BW_gams  =   BWnorGAMS*BW_omg_gams(Rmas, Rwid, X_mas)
      if (BW_class*regrndm(0).gt.BW_gams) go to 10  
      rnd_BW   =   X_mas
      return
      end   
C
      function BW_omg_gams(Rmas, Rwid, X)
C     The GAMS relativistic BW function for f2:      S.Sadovsky 17.08.2011 
C     Eur.Phys.J. A3, 361-371 (1998)
C     Input:   X    - 2pi0 mass in MeV
C              Rmas - resonanse mass  in MeV
C              Rwid - resonanse width in MeV
C
      data Ampi0, r0  / 134.9766, 121.12 /        ! pi0 mass and inverse r0 for omega in MeV
C-    data Rmas, Rwid / 782.65,     8.49 /        ! omg parameters in MeV, not used here
C                                                                     
      ppi0  = sqrt(abs((Rmas/2.)**2-Ampi0**2))
      ppiX  = sqrt(abs((X/2.)**2   -Ampi0**2))
C     
      D2pi0 = 1.+(ppi0/r0)**2                     ! Blatte-Weiskopf factor for omega
      D2piX = 1.+(ppiX/r0)**2
C
      Gamma = Rwid*(ppiX/ppi0)**3*D2pi0/D2piX                  
      BW    = Rmas**2*Gamma**2/((x*x-Rmas**2)**2+(Rmas*Gamma)**2)
      BW_omg_gams = Bw*X**2/ppiX
      return
      end 
C      
      subroutine omg_bw(Rmas, Rwid,rnd_BW)
      dimension Par(10)
      Ampi0 = 134.9766
      Par(1)= 1.
      Par(2)= Rmas
      Par(3)= Rwid
c
 10   call BW_rand(Rmas, Rwid, X_mas)
      ppi0  = sqrt(abs((Par(2)/2.)**2-Ampi0**2))
      ppiX  = sqrt(abs((X_mas/2. )**2-Ampi0**2))
      Gamma = Par(3)*(ppiX/ppi0)**1*Par(2)/X_mas
      weight=X_mas*Gamma/((X_mas*X_mas-Par(2)**2)**2+(Par(2)*Gamma)**2)
c
      weight= Par(2)*Par(3)*weight
c
      BW_class =   BW_fun     (Rmas, Rwid, X_mas)    
c     BW_gams  =   BWnorGAMS*BW_omg_gams(Rmas, Rwid, X_mas)
      BW_gams = weight*0.5
      if (BW_class*regrndm(0).gt.BW_gams) go to 10  
      rnd_BW = x_mas
C
      return
      end        
C   
      SUBROUTINE ABTOCDS(PA,MB,PC,PD,T)
C............................................................................
C      TO CALCULATE THE REACTION A+B INTO C+D ( PA - ALONG Z AXIS )
C      WHERE THE MOMENTUM OF B IS EQUAL ZERO.
C      INPUT VALUES : THE MASSES OF ALL THE PARTICLES IN PI(5) , PA(1-4) AND T
C      OUTPUT VALUES:  PC(1-4) AND PD(1-4)
C                                                  Corrected by Sdv 27.07.2017 
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION PA(5),PC(5),PD(5)
      DOUBLE PRECISION MB
      REAL REGRNDM
      DATA PI2 / 6.28318530718 /
C
      PASQ = PA(1)*PA(1) + PA(2)*PA(2) + PA(3)*PA(3)
      PPA  = DSQRT(PASQ)
      SQMA = PA(5)*PA(5)
      SQMB =    MB*MB
      SQMC = PC(5)*PC(5)
      SQMD = PD(5)*PD(5)
C      
      Qtot = SQMA+SQMB+2.*MB*PA(4)
      If (Qtot.le.(PC(5)+PD(5))**2) then
                                    T=100.
      RETURN
      ENDIF
C       
      EA    = DSQRT(SQMA+PASQ)
      ED    = (SQMB+SQMD-T)/(2.*MB)
      EC    = EA+MB-(SQMB+SQMD-T)/(2.*MB)
C      
      PPC2  = EC*EC-SQMC
      IF (PPC2 .LT. 0) THEN
         T=100.
         RETURN
      ENDIF

      PPC   = DSQRT(PPC2)
      DCOSAC =(EA*EC -.5*(SQMA+SQMC-T))/(PPA*PPC)
      DCOSQ  = DCOSAC*DCOSAC
      IF(DCOSQ.GT.1.) THEN
         T=100.
         RETURN
      ENDIF
C 
      PCTR  = DSQRT(1.-DCOSQ)*PPC
      FI    = PI2*regrndm(0)
      PC(1) = PCTR*DSIN(FI)
      PC(2) = PCTR*DCOS(FI)
      PC(3) = PPC*DCOSAC
      PC(4) = EC
      DO 1 I=1,4
    1 PD(I) = PA(I)-PC(I)
      PD(4) = PD(4)+MB
      RETURN
      END
C
C
      SUBROUTINE DECAYS(P0,P1,P2)
C...........................................................................
C   TO GENERATE ISOTROPIC (IN C.M.S.) DECAY OF ONE PARTICLE INTO TWO ONES
C   INPUT  VALUES:   P0(1-4) AND P0(5),P1(5),P2(5) - MASSES OF PARTICLES
C   OUTPUT VALUES:   P1(1-4),P2(1-4)
C   THE SUBROUTINE CALLS SUBR. ARTURS TO DO LORENZ TRANSFORMATION
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION P0(5),P1(5),P2(5),PP1(5)
      REAL REGRNDM
      DATA PI2/6.28318530718/
C
      E1=(P0(5)**2 + P1(5)**2 - P2(5)**2 )/(2*P0(5))
      E2= P0(5) - E1
      P = DSQRT(  E1**2 - P1(5)**2 )
      CT= 2.*regrndm(0) -1.
      ST= DSQRT(1.-CT**2)
      FI= regrndm(0)*PI2
      PP1(1)=P*ST*DCOS(FI)
      PP1(2)=P*ST*DSIN(FI)
      PP1(3)=P*CT
      PP1(4)=E1
      CALL ARTURS(PP1,P0,P1)
      DO 1 I=1,4
    1 P2(I) = P0(I) - P1(I)
      RETURN
      END
C
      SUBROUTINE ARTURS(PC,P0,PL)
C...........................................................................
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION PC(5),P0(5),PL(5)
C
      AM0 =  P0(5)
      EL4 = (PC(4)*P0(4) + PC(3)*P0(3) + PC(2)*P0(2) + PC(1)*P0(1))/AM0
      DO 10 I = 1,3
   10 PL(I) = PC(I) + P0(I)*(EL4+PC(4))/(P0(4)+AM0)
      PL(4) = EL4
      RETURN
      END
C
      SUBROUTINE STAR3T(PL0,PL1,PL2,PL3)
C.........................................................................
C   TO GENERATE IN CMS ISOTROPIC DECAY OF ONE PARTICLE INTO THREE ONE
C   INPUT  VALUES:   PL0(5),PL1(5),PL2(5),PL3(5) - MASSES OF PARTICLES
C   OUTPUT VALUES:   PL1(1-4),PL2(1-4),PL3(1-4) - 4-VECTORS
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION PL0(5),PL1(5),PL2(5),PL3(5),P1(5),P2(5)
      REAL REGRNDM
      DATA PI2 / 6.28318530718 /
C
      T0 = PL0(5) - PL1(5) - PL2(5) - PL3(5)
C
   10 R1 = regrndm(0)
      R2 = regrndm(0)
      IF  (R1.LT.R2) GO TO 20
      R1 = 1. - R1
      R2 = 1. - R2
C
   20 T1 = T0* R1
      T2 = T0*(R2-R1)
      T3 = T0- T1-T2
c
      EE1 = PL1(5) + T1
      EE2 = PL2(5) + T2
      PP1 = DSQRT( T1*(T1 + 2.*PL1(5)) )
      PP2 = DSQRT( T2*(T2 + 2.*PL2(5)) )
      PP3 = DSQRT( T3*(T3 + 2.*PL3(5)) )
C
      IF(PP1.GT.PP2+PP3) GO TO 10
      IF(PP2.GT.PP3+PP1) GO TO 10
      IF(PP3.GT.PP1+PP2) GO TO 10
C
      C1  = 2.*regrndm(0) - 1.
      S1  = DSQRT( 1.-C1*C1 )
      F1  = PI2*regrndm(0)
      CF1 = DCOS(F1)
      SF1 = DSIN(F1)
      P1(1) = PP1*S1*CF1
      P1(2) = PP1*S1*SF1
      P1(3) = PP1*C1
      P1(4) = EE1
C
      C12 =(PP3*PP3 - PP2*PP2 - PP1*PP1)/(2.*PP1*PP2)
      S12 = DSQRT(1.- C12*C12 )
      F12 = PI2*regrndm(0)
      CF12= DCOS(F12)
      SF12= DSIN(F12)
      X2  = PP2*S12*CF12
      Y2  = PP2*S12*SF12
      Z2  = PP2*C12
C
      P2(1) = C1*CF1*X2 - SF1*Y2 + S1*CF1*Z2
      P2(2) = C1*SF1*X2 + CF1*Y2 + S1*SF1*Z2
      P2(3) =-S1*X2              + C1*Z2
      P2(4) = EE2
C
      CALL ARTURS(P1(1),PL0(1),PL1(1))
      CALL ARTURS(P2(1),PL0(1),PL2(1))
C
      DO 30 I=1,4
   30 PL3(I) =PL0(I) - PL1(I) - PL2(I)
C
      RETURN
      END
C
      SUBROUTINE STAR4M(P0,P1,P2,P3,P4)
C                                         S.Evdokimov routines 
C      
C     first P0->P1+P234 then P234->P2+P3+P4
C     input: P*(5) - masses of particles, P0(1-4) - 4-momentum
C     output P*(1-5) - 5-momentum
C
C     IMPORTANT: P2(5)=P3(5)=P4(5)  DO NOT FORGET!!!
C     3-particle phase space approx.calculated only for this case
C     G.I.Kopylov, "Osnovy kinematiki resonansov", str.215, formula 28
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION P0(5),P1(5),P2(5),P3(5),P4(5),P234(5)
      REAL REGRNDM
      DATA PI / 3.14159265359 /
C      
      NCYCL=0
 10   R1=regrndm(0)
      R2=regrndm(0)
C                  SA lectures 
C
      AMU       = (P2(5)+P3(5)+P4(5))**2
      SQRM234   = AMU+R1*((P0(5)-P1(5))**2-AMU)
      ALPHA     = P2(5)/DSQRT(SQRM234)
      ALPHAMIN  = 0.33333333333333333
C
      RHO       = DSQRT(((P0(5)**2+P1(5)**2-SQRM234)**2)/
     /     (2*P0(5))**2-P1(5)**2)*FUNC(ALPHA)*SQRM234
C
      arg = (((P0(5)**2+P1(5)**2-AMU)**2)/ ! protection by YK 18.07.2017
     /     (2*P0(5)))**2-P1(5)**2          !
      if (arg .LT. 0) arg = 0.D0           !
      AMAX      = DSQRT(arg)*AMU
C
      NCYCL=NCYCL+1
      IF ( NCYCL.GT.10000) GO TO 20
      if((AMAX*R2).gt.RHO) GO TO 10
C
 20   P234(5)=DSQRT(SQRM234)
      call DECAYS(P0,P1,P234)
      call STAR3T(P234,P2,P3,P4)
      RETURN 
      END
C
      FUNCTION FUNC(ALPHA)
C     G.I.Kopylov, "Osnovy kinematiki resonansov", str.215, formula 28
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      FUNC=(1.+0.997*ALPHA**2)*((1.-ALPHA)**1.5)*(1.-9.*ALPHA**2)**2
      RETURN 
      END
C=====================================================================================
C
C     hyp_Carlo.f  is included here                                          Sdv
C                                                                        17.02.2019
C=====================================================================================      
C
      subroutine hyp_event(Momentum,Nreson,Nchanel,Ngamma,Pgamma)         !  Sdv
C                                                                        17.02.2019    
C     Omitted parameters:  Ptarget,Ntarget 
C 
C     Real input parameters:                   Output parameters:
C                Momentum -- beam mom GeV/c    Nchanel -- decay channel of resonance
C                Nreson   -- reaction index    Ngamma  -- number of photons in final stage
C                                              Pgamma  -- array of 10-vectors of the photons 
C
C     MC for the inclusive reaction:
C            a  +  bZN --> c0 + X
C            c0 --> c1 + c2 + ...
C........................................................................................... 
C-    IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      SAVE
      Real Momentum, regrndm
      Double precision Pbeam
      Dimension Ptarget(10)
      Dimension Pchanel(10,10)      ! Number of resonans, Number of chanel
      Dimension Preson(10)          ! Resonan probability
      Dimension PtrgtSm(10), PchanSm(10,10), PresSm(10)
C-    Double precision T,Pa(5),Pb(5),Pc(5),Pd(5),Pgamma(10,10)
      Double precision T,Pa(5),Pb(5),Pc(5),Pd(5),Pgamma(10,0:9)
      Double precision Tf2
      Double precision P1(5), P2(5), P3(5), P4(5), PPc, CtauK0
      Double precision Xvertex, Yvertex, Zvertex, Random, R1, R2, FF
      Double precision Double_Mass_distr_2pi0
      Integer Mchanel(10)
      integer n30calls
C       
      Integer ExTarget, ExReson, ExChanel
C-    data    ExTarget, ExReson, ExChanel  / 3, 4, 1/ !  The main parameters for f2 exclusive channel 
      data    ExTarget, ExReson, ExChanel  / 3, 6, 1/ !  The main parameters for omg exclusive channel
      data Mtarget,Mgamma,Mreson  / 3, 9, 10 /        !  3 targets, 9 photons maximum, 9 resonanses (yet) 
C     data Ptarget  /  1. 0, 1.0, 1.0, 0.0, 6*0. /    !  Target probability
C     data Preson   /  0.14124, 0.02401, 0.03107, 0.05367, 
C     +                         0.74576, 0.00423, 0.057, 3*0./        !  Resonans probability
      data Preson   /  0.041, 0.024, 0.031, 0.054,
     +                           0., 0.032, 0.057, 0.00, 2*0./        !  Resonans probability
C
C-    data Mchanel  /     1,   2,   1,   1,   1,  1,  1, 1, 1, 0 /    !  Decay cahannels
      data Mchanel  /     1,   1,   1,   1,   1,  1,  1, 1, 1, 1 /    !  Decay cahannels
      data Pchanel  /  1.00, 9*0.0,                              !  pi0 /pi0->2Y/
     2                39.41, 32.68, 0.0256, 7*0.0,               !  eta /eta->2Y, eta->3pi0->6Y, eta->2Ypi0->4Y/
     3                1.0, 0.0, 0.0, 0.0,   6*0.0, !  omg /omg->pi0Y->3Y, omg->3pi0, omg->2pi0, omg->etapi0/
     4                1.000, 9*0.0, !  K0 /K0s->2pi0->4Y/
     5                1.000, 9*0.0,                              !  f2 /f2->2pi0->4Y/
     6                1.000, 9*0.0,                              !  2pi0 /2pi0->4Y/
     7                1.000, 9*0.0,                              !  f0 /f0->2pi0->4Y/
     8                1.000, 9*0.0,                              !  pi0 /pi0->2Y/ for MC Z-scale calibration
     9                1.000, 9*0.0,                              !  eta /eta->2Y/ for MC Z-scale calibration
     +                1.000,                 9*0.0  /            !  rho0(770)->pi0gamma
      data CtauK0     / 2.6844  /                                 !  C*lifetime(K0s)
C ..............................................................................
      Logical Lstart
      data Lstart   /.false./  
C    
      data    Ampi,    Ampi0,    AmEta,     AmK0,      Amp,      Amn    
     +/   0.139570, 0.134977, 0.547862, 0.497611, 0.938272, 0.939565 /  ! Mass in GeV
C
      data   AmOmg,	 Amf0,     Amf2,    AmRho0   !  Masses of resonances in MeV 
     +/     782.65,	446.0,   1275.5,    769.0 /
C      
      data  WidOmg, 	Widf0,	  Widf2,    WidRho0    !  Widths of resonances in MeV 
     +/      8.490,     350.0,	  186.7,    151.7 /  
C---------------------------------------------------------------------------------   
C
      if(Nreson.gt.Mreson) then
                   write(*,*) 'hyp_carlo: Ireact=',Nreson
		   write(*,*) '************************************************'
                   stop 'hyp_carlo: ERROR reaction Index'
	       endif
C
C-    if(Lstart) go to 10           !  Riginal operator for primary hyp_carlo routine
      if(Lstart) go to 30           !  Operator for call from Hyp_RegGen routine
C....................................................................................
C Target randomizer 
C
C-    do j=1,Ntarget
C-    R1=REGRNDM(0)
C-    enddo
C 
C Target probablities:
C
C-    CrSec = 0.
C-    do j=1,Mtarget
C-    CrSec = CrSec + Ptarget(j)
C-    enddo
C
C-    PtrgtSm(1)= Ptarget(1)/CrSec
C-    do j=1,Mtarget-1
C-    PtrgtSm(j+1) = PtrgtSm(j)+Ptarget(j+1)/CrSec
C-    enddo	 
C-    if(PtrgtSm(Mtarget).lt.0.99999) stop'Carlo: Target probability ERR'
C-    if(ExTarget.gt.Mtarget)	     stop'Carlo: Exclusive target ERR'
C
C-    if (ExTarget.gt.0) then
C-      		 Ntarget = ExTarget
C-      		 write(*,*) 'Carlo: Eclusive target number =',Ntarget
C-      else		       
C-      do j=1,Mtarget
C-      write(*,*)'Carlo: Target_Nb, Probability=',j,Ptarget(j)/CrSec
C-      enddo
C-    endif
C
C Resonans probablities:
C
C-    CrSec = 0.
C-    do j=1,Mreson
C-    CrSec = CrSec + Preson(j)
C-    enddo
C
C-    PresSm(1)= Preson(1)/CrSec
C-    do j=1,Mreson-1
C-    PresSm(j+1) = PresSm(j)+Preson(j+1)/CrSec
C-    enddo	 
C-    if(PresSm(Mreson).lt.0.99999)stop'Carlo: Resonance probability ERR'
C-    if(ExReson.gt.Mreson)	stop'Carlo: Exclusive resonance ERR'
C
C-    if (ExReson.gt.0) then
C-   		  Nreson = ExReson
C-   		  write(*,*) 'Carlo: Eclusive resonance number =',Nreson
C-      else		       
C-      do j=1,Mreson
C-      write(*,*)'Carlo: Resonance Nb Probability:',j,Preson(j)/CrSec
C-      enddo
C-    endif
C.................................................................................
C
C Exclusive channel decay probabilities 
C
C1-   if (ExChanel.le.0) then
       do n=1,Mreson
        CrSec = 0.
        do j=1,Mchanel(n)
        if(Pchanel(j,n).gt.0.) CrSec = CrSec + Pchanel(j,n)
C-      write(*,*) 'CrSec,Pchanel(j,n)',Mreson,j,CrSec,Pchanel(j,n)
        enddo	
C
        PchanSm(1,n) = 0.
        if(Pchanel(1,n).ge.0.) PchanSm(1,n)= Pchanel(1,n)/CrSec      
			       
        do j=1,Mchanel(n)-1
        if(Pchanel(j+1,n).ge.0.) PchanSm(j+1,n) = 
     +                           PchanSm(j,n)+Pchanel(j+1,n)/CrSec
        enddo      
 
        if (PchanSm(Mchanel(n),n).lt.0.99999) then
             stop 'Channel prob. error'   
	  else  		 
	   do j=1,Mchanel(n)
	    Prob=Pchanel(j,n)
	    if (Prob.ge.0.) 
     +      write(*,*)'Res. Nb, Channel Nb, Problt:',n,j,Prob/CrSec
	   enddo
        endif
       enddo     
C
C1-   else
C1-   Nchanel = ExChanel
C1-     write(*,*) 'Exclusive decay channel number =',Nchanel
C1-     
C1-     if(ExReson.le.0) then
C1-      do j=1,Mreson  
C1-       if(ExChanel.gt.Mchanel(j)) stop 'Excl.decay channel error'
C1-      enddo
C1-     else
C1-      if(ExChanel.gt.Mchanel(ExReson)) stop 'Excl.decay chnl error'
C1-     endif
C1-   endif 
C 
C Beam:
C
      Pbeam = Momentum
      Pa(5) = Ampi      
      Pa(1) = 0.
      Pa(2) = 0.
      Pa(3) = Pbeam                     ! will be redefined later with beam distortion
      Pa(4) = Dsqrt(Pa(5)**2 + Pa(3)**2 + Pa(2)**2 + Pa(1)**2)
      write(*,*) 'Pbeam (px, py, pz, e, m) = (',Pa(1), ',',  Pa(2), ',',Pa(3), ',',Pa(4), ',',Pa(5), ')'
C
C Target:
C
      Pb(5) = Amn     
      Pb(1) = 0.
      Pb(2) = 0.
      Pb(3) = 0.
      Pb(4) = Dsqrt(Pb(5)**2 + Pb(3)**2 + Pb(2)**2 + Pb(1)**2) 	
C
C Photon masses:       
C
      do j=1,Mgamma
         Pgamma(5,j) = 0.
      enddo
      n30calls=0
C      
      Lstart=.true.
C     read(*,*)
C --------------------      
C       
C Choose target:
C
C- 10 if (ExTarget.le.0) then 
C-    R1 = REGRNDM(0)
C-    do j=1,Mtarget
C-    if (R1.lt.PtrgtSm(j)) then
C-			    Ntarget = j     
C-			    go to 20
C-		     endif 
C-	     enddo
C-	else 
C-    Ntarget = ExTarget
C-    endif
C
C Choose resonans:
C
C- 20 if(ExReson.le.0) then
C-    R1 = REGRNDM(0)
C-    do j=1,Mreson
C-    if (R1.lt.PresSm(j)) then
C- 			   Nreson = j	  
C- 			   go to 30
C- 		     endif 
C- 	  enddo
C- 	 else
C-     Nreson = ExReson
C-     endif 
C  
C Choose excl. decay channel:
C
C- 30 if (ExChanel.le.0) then
   30 n30calls=n30calls+1
C
      R1 = REGRNDM(0)
      do j=1,Mchanel(Nreson)
      if (R1.lt.PchanSm(j,Nreson)) then
		     Nchanel = j     
		     go to 40
	       endif 
	   enddo

      Nchanel = Mchanel(Nreson)
C-    endif    

   40 continue
C
C Beam momentun correction, there is another corr_1 above      
C	    
C-    sigP = 0.070      ! Momentum distortion there is another corr_1 above 
C-    sigP = 0.140      ! Momentum distortion there is another corr_1 above 
      sigP = 0.210      ! Momentum distortion there is another corr_1 above 
   45 rndG  = rnd_gauss(1.) 
      if(abs(rndG).gt.3.0) go to 45
      Pa(3) = Pbeam + sigP*rndG         ! Momentum distortion there is another corr_1 above 
      Pa(4) = Dsqrt(Pa(5)**2 + Pa(3)**2 + Pa(2)**2 + Pa(1)**2)
C Spectator:
C
      Pd(5) = Amp     
C
C C-system:  
C             
C-    write(*,*) 'Hyp_Carlo: Nreson=',Nreson 
      
      if (Nreson.eq.1) then                        !  Resonans 1 - pi0
         call reaction(Nreson, T, Pd(5))        
         Pc(5) = Ampi0
	 call abtocds(Pa,Pb(5),Pc,Pd,T)
	 if (T.gt.0.) go to 1000
         if (Nchanel.eq.1) then                     !  Excl. channel = pi0 -> 2Y
C        write(*,*) 'Pi0->2Y'
         call decays(Pc,Pgamma(1,1),Pgamma(1,2))
         Ngamma = 2	 
         endif
C
         do j=1,Ngamma
	 Pgamma(6,j) = 0.
	 Pgamma(7,j) = 0.
	 Pgamma(8,j) = 0.
	 Pgamma(9,j) =22.                           !  PDG code of photon
	 Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code
         enddo
      endif
C
      if (Nreson.eq.2) then	                    !  Resonans 2 - eta 
         cntrl_prmtr=Pgamma(1,0)
         if (cntrl_prmtr.gt.0.) then
            if(cntrl_prmtr.lt.1.0015.and.cntrl_prmtr.gt.1.0005)
     c           Nchanel=1
            if(cntrl_prmtr.lt.1.0025.and.cntrl_prmtr.gt.1.0015)
     c           Nchanel=2
         endif
         Pc(5) = AmEta
         call reaction(Nreson, T, Pd(5))  
         call abtocds(Pa,Pb(5),Pc,Pd,T)
	 if (T.gt.0.) go to 1000
C	  
	    if (Nchanel.eq.1) then                  !  Excl. channel = eta -> 2Y
             call decays(Pc,Pgamma(1,1),Pgamma(1,2))
             Ngamma = 2
            endif
C
            if (Nchanel.eq.2) then                  !  Excl. channel = eta -> 3pi0 ->6Y
             P1(5) = Ampi0
             P2(5) = Ampi0
             P3(5) = Ampi0
             call STAR3T(Pc,P1,P2,P3)
             call decays(P1,Pgamma(1,1),Pgamma(1,2))
             call decays(P2,Pgamma(1,3),Pgamma(1,4))
             call decays(P3,Pgamma(1,5),Pgamma(1,6))
             Ngamma = 6
C-
C            write(*,*)
C	     write(*,*)
C
C	     do l=1,4
C	     P4(l) = 0.
C	     enddo
C
C	     do l=1,6
C	     P4(1) = P4(1)+Pgamma(1,l)
C	     P4(2) = P4(2)+Pgamma(2,l)
C	     P4(3) = P4(3)+Pgamma(3,l)
C	     P4(4) = P4(4)+Pgamma(4,l)

C	     enddo
C
C	     Esm = P4(4)
C	     call hf1(105,Esm,1.)
C-
     
C  77	     format(5E20.10)
C             do k=1,4
C	     Pc(k)= P1(k)+P2(k)+P3(k)
C             enddo
            endif

C
            if (Nchanel.eq.3) then                  !  Excl. channel = eta -> 2Ypi0 ->4Y
	    P1(5) = Ampi0
	    call STAR3T(Pc,P1,Pgamma(1,1),Pgamma(1,2))
            call decays(P1,Pgamma(1,3),Pgamma(1,4))
            Ngamma = 4
        endif
C
      	do j=1,Ngamma
        Pgamma(6,j) = 0.
	Pgamma(7,j) = 0.
	Pgamma(8,j) = 0.
	Pgamma(9,j) =22.                            !  PDG code of photon
	Pgamma(10,j)=100*Nreson+10*Nchanel+j        !  Photon hystory code
	enddo
      endif
C
      if (Nreson.eq.4) then                         !  Resonance 4 - K0s
         Pc(5) = AmK0
         call reaction(Nreson, T, Pd(5))                 
         call abtocds(Pa,Pb(5),Pc,Pd,T)
         if (T.gt.0) go to 1000
C
C         
         if (Nchanel.eq.1) then                     !  Excl. channel = K0s -> 2pi0->4Y
          P1(5) = Ampi0
          P2(5) = Ampi0
          call decays(Pc, P1, P2)
          call decays(P1, Pgamma(1,1), Pgamma(1,2))
          call decays(P2, Pgamma(1,3), Pgamma(1,4))
          Ngamma = 4
         endif
C
C
          Random = REGRNDM(0)
          PPc = dsqrt((Pc(1)**2+Pc(2)**2 + Pc(3)**2))
          Xvertex = - (Pc(1)/PPc)*(Pc(4)/Pc(5))*CtauK0*dlog(Random)
          Yvertex = - (Pc(2)/PPc)*(Pc(4)/Pc(5))*CtauK0*dlog(Random)
          Zvertex = - (Pc(3)/PPc)*(Pc(4)/Pc(5))*CtauK0*dlog(Random)
          do j=1,Ngamma
          Pgamma(6,j) = Xvertex
	  Pgamma(7,j) = Yvertex
	  Pgamma(8,j) = Zvertex
	  Pgamma(9,j) = 22.
	  enddo
      endif
C     
      if (Nreson.eq.5) then                         !  Resonance 5 - f2
C-
         width_f2 = Pgamma(1,0) ! read width from control variable (see run_g3_control.C).
         if(width_f2.le.0.0) width_f2 = Widf2
         call BW_rand_f2(Amf2,width_f2,rnd_BW)
C         call BW_rand_f2(Amf2,Widf2,rnd_BW)         !  GAMS BW for f2(1275)
	 Pc(5) = 0.001*rnd_BW                       !  MeV => GeV
C        added to change f2 mass via control parameter. comment out if not needed.
         Rmass_f2 = Pgamma(1,0) ! fixed mass in MeV
         if(Rmass_f2.gt.0.) Pc(5) = 0.001*Rmass_f2 ! MeV to GeV
C-	 
 5696    call reaction(Nreson, T, Pd(5))
         Tf2=T ! save first generated T in order not to destroy its distribution
c
c  30    write(*,*) 'f2 generator: I generated T = ', Tf2
c        T=Pgamma(1,0) ! read T from control variable (see run_g3_control.C). used to examine T resolution 
c        write(*,*) 'RegGen: I generated following kinematics for f2 decay:'
c        write(*,*) 'Mass	  = ', Pc(5)
c        write(*,*) 'T  	  = ', T
c        write(*,*) 'Missing mass = ', Pd(5)
c
         ncalls_reaction = 1
 5697    call abtocds(Pa,Pb(5),Pc,Pd,T)
         if (T.gt.0) then 
            call reaction(Nreson, T, Pd(5))
            T=Tf2
            ncalls_reaction=ncalls_reaction+1
            if(ncalls_reaction.gt.4) then
C!!!-          write(*,*)'cannot generate Missing mass for mass = ', Pc(5)
               goto 5696
            endif
            go to 5697
         endif
C
         if (Nchanel.eq.1) then                     !  Excl. channel = f2 -> 2Pi0 -> 4Y
          P1(5) = Ampi0
          P2(5) = Ampi0
          call decays(Pc, P1, P2)
          call decays(P1, Pgamma(1,1), Pgamma(1,2))
          call decays(P2, Pgamma(1,3), Pgamma(1,4))
          Ngamma = 4
         endif
C
C
c         write(*,*) 'RegGen: I generated following gammas for f2 decay:'
         do j=1,Ngamma         
         Pgamma(6,j) = 0.    
         Pgamma(7,j) = 0. 
         Pgamma(8,j) = 0.    
         Pgamma(9,j) =22.                           !  PDG code of photon 
         Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code
c        write(*,*) 'gamma ',j,': (px py pz e) = (',Pgamma(1,j),Pgamma(2,j), Pgamma(3,j), Pgamma(4,j),')'
         enddo
      endif
                                                                                              
C                                                                                             
      if (Nreson.eq.6) then                         !  Resonance 6 - 2pi0 
 854     R1=REGRNDM(0)                                                                        
C-       R2=REGRNDM(0)                              !                                           
C-       FF=Double_Mass_distr_2pi0(R1*2100.)        !  M.Stolpovsky mass distribution   
C-       FF=Double_Mass_distr_2pi0(R1*2750.)        !  M.Stolpovsky mass distribution                                                                                               
C-       if((R2*800.).gt.FF) go to 854 
C-       Pc(5) = FF     !                                          
C                                                               
         Pc(5) = 0.270 + 2.480*R1                   !  ===> Uniform distribution up 2.5
         P1(5) = Ampi0                              !       but actually due to t & MisMs                                          
         P2(5) = Ampi0                              !       this is not unifomdistribution                                          
 855     call reaction(Nreson, T, Pd(5))
C-	                          Pd(5) = 0.938272  !  proton mass                                               
         call abtocds(Pa,Pb(5),Pc,Pd,T)  	 
	 if (T.gt.0) go to 854                                                     
         call decays(Pc, P1, P2)                                                                
C                                                                                             
         if (Nchanel.eq.1) then                     !  Excl. channel 2pi0                     
           call decays(P1, Pgamma(1,1), Pgamma(1,2))                                          
           call decays(P2, Pgamma(1,3), Pgamma(1,4))                                          
           Ngamma = 4                                                                         
         endif                                                                                
C                                                                                             
         do j=1,Ngamma                                                                        
         Pgamma(6,j) = 0.                                                                     
         Pgamma(7,j) = 0.                                                                     
         Pgamma(8,j) = 0.                                                                     
         Pgamma(9,j) =22.                           !  PDG code of photon                     
         Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code                    
         enddo                                                                                
      endif                                                                                   
C                                         
      if (Nreson.eq.3) then                         !  Resonance 3 - omega
C-       Pc(5) = Amw + (s2w/2.36)*rnd_gauss(1.)     !  Simple Gauss distribution
C
         cntrl_prmtr=Pgamma(1,0)
         if (cntrl_prmtr.gt.0.) then
            if(cntrl_prmtr.lt.0.1) WidOmg = cntrl_prmtr*1000. !  read width from control parameter from 0 to 0.1 GeV
            if(cntrl_prmtr.lt.1.0015.and.cntrl_prmtr.gt.1.0005) 
     c           Nchanel=1
            if(cntrl_prmtr.lt.1.0025.and.cntrl_prmtr.gt.1.0015)
     c           Nchanel=2
            if(cntrl_prmtr.lt.1.0035.and.cntrl_prmtr.gt.1.0025)
     c           Nchanel=3
            if(cntrl_prmtr.lt.1.0045.and.cntrl_prmtr.gt.1.0035)
     c           Nchanel=4
         endif
 345     call BW_rand_omg(AmOmg,WidOmg ,rnd_BW) !  GAMS BW for omg(782)  
         Pc(5) = 0.001*rnd_BW                       !  MeV => GeV   
C    
         call reaction(Nreson, T, Pd(5))            !  Just like eta 
         call abtocds(Pa,Pb(5),Pc,Pd,T)      
         if (T.gt.0) go to 1000
C
         if (Nchanel.eq.1) then !  Excl. channel = w -> pi0Y -> 3Y
            P1(5) = Ampi0
            if(Pc(5).le.Ampi0) goto 345
            call decays(Pc, P1, Pgamma(1,1))
            call decays(P1, Pgamma(1,2), Pgamma(1,3))
            Ngamma = 3
         endif
C     
         if (Nchanel.eq.2) then !  Excl. channel = omg->3pi0                                                                                                        
            P1(5) = Ampi0
            P2(5) = Ampi0
            P3(5) = Ampi0
            if(Pc(5).le.(3.*Ampi0)) goto 345
            call STAR3T(Pc, P1, P2, P3)
            call decays(P1, Pgamma(1,1), Pgamma(1,2))
            call decays(P2, Pgamma(1,3), Pgamma(1,4))
            call decays(P3, Pgamma(1,5), Pgamma(1,6))
            Ngamma = 6
         endif
C
         if (Nchanel.eq.3) then !  Excl. channel = omg->2pi0
            P1(5) = Ampi0
            P2(5) = Ampi0
            if(Pc(5).le.(2.*Ampi0)) goto 345
            call decays(Pc, P1, P2)
            call decays(P1, Pgamma(1,1), Pgamma(1,2))
            call decays(P2, Pgamma(1,3), Pgamma(1,4))
            Ngamma = 4
         endif
C
         if (Nchanel.eq.4) then !  Excl. channel = omg->etapi0
            P1(5) = AmEta
            P2(5) = Ampi0
            if(Pc(5).le.(AmEta+Ampi0)) goto 345
            call decays(Pc, P1, P2)
            call decays(P1, Pgamma(1,1), Pgamma(1,2))
            call decays(P2, Pgamma(1,3), Pgamma(1,4))
            Ngamma = 4
         endif
C         
         do j=1,Ngamma
         Pgamma(6,j) = 0.
	 Pgamma(7,j) = 0.
	 Pgamma(8,j) = 0.
	 Pgamma(9,j) =22.                           !  PDG code of photon
	 Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code
         enddo
      endif
C
      if (Nreson.eq.10) then                        !  Resonance 10 - rho0(770)
C-       Pc(5) = Amw + (s2w/2.36)*rnd_gauss(1.)     !  Simple Gauss distribution
C          
C         if (Pgamma(1,0).gt.0.) WidOmg = Pgamma(1,0)*1000. !  read width from control parameter
         call BW_rand_omg(AmRho0,WidRho0 ,rnd_BW)     !  GAMS BW for omg(782)  
         Pc(5) = 0.001*rnd_BW                       !  MeV => GeV   
C    
         call reaction(3, T, Pd(5))                 !  Just like omega 
         call abtocds(Pa,Pb(5),Pc,Pd,T)      
         if (T.gt.0) go to 1000 
         if (Nchanel.eq.1) then                     !  Excl. channel = rho0(770) -> pi0Y -> 3Y
          P1(5) = Ampi0
          call decays(Pc, P1, Pgamma(1,1))
          call decays(P1, Pgamma(1,2), Pgamma(1,3))
          Ngamma = 3
         endif
C         
         do j=1,Ngamma
         Pgamma(6,j) = 0.
	 Pgamma(7,j) = 0.
	 Pgamma(8,j) = 0.
	 Pgamma(9,j) =22.                           !  PDG code of photon
	 Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code
         enddo
      endif	 	 
C
      if (Nreson.eq.7) then                         !  Resonance 7 - f0(500) -> 2pi0	 
	 call BW_rand_f0(Amf0,Widf0,rnd_BW)         !  GAMS BW for f0(500)
	 Pc(5) = 0.001*rnd_BW                       !  MeV => GeV
C-	 
         Kreson= 5                                  !  i.e. t and mismas from f2 meson
	 call reaction(Kreson, T, Pd(5))
         call abtocds(Pa,Pb(5),Pc,Pd,T)
         if (T.gt.0) go to 1000
C
         if (Nchanel.eq.1) then                     !  Excl. channel = f0 -> 2Pi0 -> 4Y
          P1(5) = Ampi0
          P2(5) = Ampi0
          call decays(Pc, P1, P2)
          call decays(P1, Pgamma(1,1), Pgamma(1,2))
          call decays(P2, Pgamma(1,3), Pgamma(1,4))
          Ngamma = 4
         endif
C
         do j=1,Ngamma
         Pgamma(6,j) = 0.
	 Pgamma(7,j) = 0.
	 Pgamma(8,j) = 0.
	 Pgamma(9,j) =22.                          !  PDG code of photon
	 Pgamma(10,j)=100*Nreson+10*Nchanel+j      !  Photon hystory code
         enddo
      endif
C
      if (Nreson.eq.8.or.Nreson.eq.9) then         !  Monochromatic pi0 (8) or eta (9) for MC Z calibration	 
       
         call reaction(Nreson, T, Pd(5))      
         if (Nreson.eq.8) Pc(5) = Ampi0
	 if (Nreson.eq.9) Pc(5) = Ameta
C	 
	 call abtocds(Pa,Pb(5),Pc,Pd,T)
	 if (T.gt.0.) go to 1000
         if (Nchanel.eq.1) then                    !  Excl. channel = pi0 -> 2Y or  eta -> 2Y
C        write(*,*) 'Pi0->2Y'
         call decays(Pc,Pgamma(1,1),Pgamma(1,2))
         Ngamma = 2	 
         endif
C
         do j=1,Ngamma
	 Pgamma(6,j) = 0.
	 Pgamma(7,j) = 0.
	 Pgamma(8,j) = 0.
	 Pgamma(9,j) =22.                           !  PDG code of photon
	 Pgamma(10,j)=100*Nreson+10*Nchanel+j       !  Photon hystory code
         enddo
      endif
C
C-    write(*,*) 'Ngamma,Pd=',Ngamma,Pd
      Ngamma = Ngamma+1
      do k=1,5
         Pgamma(k,0) = Pd(k) 
      enddo
         Pgamma(6,0) = 0.
	 Pgamma(7,0) = 0.
	 Pgamma(8,0) = 0.   
         Pgamma(9,0) =100.       ! Dummy index means no GEANT interaction 
         Pgamma(10,0)=100*Nreson+10*Nchanel+j
      return
C       
 1000 CONTINUE
C  
C!!!- Ngamma = 0
      go to 30
      RETURN
      END       
C      
      subroutine Ptrans(Pt,Pa,Pb,t)
C
C     Elastic emmission of photons in the target vertex:
C     G.Baur et al, Phys.Rep.364 (2002), p.359-450. 
C      
      real regrndm
      double precision Pt(7),Pa(7),Pb(7),t,pi2,phi
      logical Logb
      save    Logb, Ra, Rb,gamma,Omax,Otmx,Omin,Wmax
      data r0,Logb, hc/ 1.2, .true., 0.197326 /   ! r0 [Fm], hc [GeV*Fm]
      data pi2/ 6.283185307/    
C
      if (logb) then
                Ra   = r0*(Pa(6)+Pa(7))**0.3333333333
		Rb   = r0*(Pb(6)+Pb(7))**0.3333333333
		gamma= Pa(4)/Pa(5)
		Omax = gamma*hc/(Ra+Rb) 	
		Otmx = hc/Rb
		Omin = 0.0001
		Wmax = alog(Omax/Omin)
		write(*,*) 'Et(min),Et(max),Pt(max)=',Omin,Omax,Otmx 
                Logb =.false.
          endif 
C                                             Energy of the virtual photon
   10 Omega =-Omax*alog(REGRNDM(0))
      if (Omega.lt.Omin.or.Omega.gt.Omax)     go to 10
      if (Wmax*REGRNDM(0).gt.alog(Omax/Omega)) go to 10
C      	                              
   20 qt =-Otmx*alog(REGRNDM(0))          !    Trannsverse momentum
      if (qt.gt.Otmx)    go to 20
      Omg  = Omega/gamma
      Wqmx = 1./(16.*Omg)                 !    Omgmx = sqrt(3)*Omg
      if (Wqmx*REGRNDM(0).gt.qt**3/(Omg**2+qt**2)**2) go to 20
C  
      t     =-Omega**2-qt**2
      phi   = pi2*REGRNDM(0)
      Pt(1) = qt*cos(phi)
      Pt(2) = qt*sin(phi)
      Pt(3) =-Omega
      Pt(4) =-sqrt(abs(Omega**2+qt**2 + t))
      Pt(5) = t
      return
      end
C
C**************************************************************************
C
      subroutine reaction(Nreson, T, MissMass)
C...............................................................................
C      for given resonance ruturns trans. momentum and missing mass
C      distributions calculated by S.Sadovsky   10.05.2020
C      f2 calculated 30.06.11 by SA and me
C
      integer Nreson
      real regrndm
      double precision R1, R2, T, b, Random, Random2
      double precision MissMass, Mean, s2, Double_MM_distr_2pi0,FF
      double precision Double_T_distr_f2,Double_MM_distr_f2 
      integer ncalls
      data ncalls /0/
      save ncalls
C
      if (Nreson.eq.1) then                    !  resonance = pi0
C
C-    b = 5.312 ; b = 5.012 ;  b = 4.712
      b = 4.812
  134 Random = REGRNDM(0)
      Random2= REGRNDM(0)
      T = (1./b)*(dlog(Random)+dlog(Random2))  !  rho = (1/b)*x*exp(-b*x)
C
      A   = 938.2     ;  B = 3500.
C-    alp =-1.0       ;  bet = 1.500D-3
      alp =-1.0       ;  bet = 1.650D-3
      anr = alp*(B-A) + 0.5*bet*(B*B-A*A)
      alp = alp/anr
      bet = bet/anr
C
      Random = REGRNDM(0)      
      MissMass = A + (alp+dsqrt(alp*alp+2.*bet*Random))/(bet)
C-    write(*,*) anr, alp, bet, MissMass
      MissMass = 0.001*MissMass     
      endif
C
      if (Nreson.eq.2) then                    !  resonance = eta
C      
C0-   b = 5.770  &  b = 5.470  ;  b = 5.070    ;  b = 4.870
C1-   b = 4.950
      b = 4.900
  234 Random = REGRNDM(0)
      Random2= REGRNDM(0)
      T = (1./b)*(dlog(Random)+dlog(Random2))  !  rho = (1/b)*x*exp(-b*x)
C
      Random = REGRNDM(0)
C0-   if (Random.lt.0.42) then
C1-   if (Random.lt.0.34) then
C2-   if (Random.lt.0.30) then
      if (Random.lt.0.29) then
C-                        Mean = 0.940 ;  s2 = 0.100
                          Mean = 0.940 ;  s2 = 0.150
                 else
C-		          Mean = 1.850 ;  s2 = 0.350
		          Mean = 1.850 ;  s2 = 0.450	  
          endif
C	   
  222 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5000)) go to 222
      if (MissMass.lt.(0.9382)) go to 222
      endif 
C
      if (Nreson.eq.3) then                  !  resonance = omg 
C      
C-    b = 5.278  ;  b = 4.978  ;  b = 4.578 :  b = 4.700
C1-   b = 4.800
C2-   b = 4.750
      b = 4.725
  334 Random = REGRNDM(0)
      Random2= REGRNDM(0)
      T = (1./b)*(dlog(Random)+dlog(Random2)) !  rho = (1/b)*x*exp(-b*x)
C
      Random = REGRNDM(0)
C1-   if (Random.lt.0.285) then
C2-   if (Random.lt.0.280) then
C3-   if (Random.lt.0.275) then
C4-   if (Random.lt.0.273) then
C5-   if (Random.lt.0.270) then
C6-   if (Random.lt.0.265) then
C7-   if (Random.lt.0.255) then
C8-   if (Random.lt.0.235) then
      if (Random.lt.0.215) then
C-                         Mean = 0.9400  ;  s2 = 0.100
                           Mean = 0.9400  ;  s2 = 0.150  				  
                 else
C-			   Mean = 1.850   ;  s2 = 0.350
			   Mean = 1.850   ;  s2 = 0.400		  
          endif
C  
  335 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5000)) go to 335
      if (MissMass.lt.(0.9382)) go to 335
      endif 
  
      if (Nreson.eq.4) then                  !  resonance = K0s in old T-format
C1-   b = 2.9392
C1-   b = 2.9192
      b = 2.9092
      Random = REGRNDM(0)
      T = (1./b)*dlog(Random)
C
C1-   Mean = 1.7538
      Mean = 2.2538
C2-   s2 = 0.63152
      s2 = 0.83152
  433 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5000)) go to 433
      if (MissMass.lt.(0.9382)) go to 433
      endif 
C
      if (Nreson.eq.5) then                  !  resonance = f2
C
C 434 b = 7.66513
C 434 b =12.00000
  434 b =13.00000
      Random = REGRNDM(0)
      Random2= REGRNDM(0)
      T = (1./b)*(dlog(Random)+dlog(Random2))
C
C-    Mean = 1.000  ;  s2 = 0.150
      Mean = 0.940  ;  s2 = 0.100     
 444  MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5000)) go to 444
      if (MissMass.lt.(0.9382)) go to 444
C-    MissMass = 0.938272
      endif
C
      if (Nreson.eq.6) then                  !  resonance = 2pi0
C
C-    b = 5.711  ;  b = 5.411  ;  b = 5.111
      b = 5.000
  534 Random = REGRNDM(0)
      Random2= REGRNDM(0)
      T = (1./b)*(dlog(Random)+dlog(Random2))
C
      Random = REGRNDM(0)
C0-   if (Random.lt.0.10) then
C1-   if (Random.lt.0.04) then	
C2-   if (Random.lt.0.045)then
C3-   if (Random.lt.0.035)then
      if (Random.lt.0.028)then
C-                        Mean = 0.940  ;  s2 = 0.300
C2-			  Mean = 0.940  ;  s2 = 0.350
			  Mean = 0.940  ;  s2 = 0.150	  			  
                 else
C-                        Mean = 3.300  ;  s2 = 0.700
C1-                       Mean = 3.500  ;  s2 = 0.700
                          Mean = 3.500  ;  s2 = 0.850			  
          endif
C	   
  555 MissMass = Mean+s2*rnd_gauss(1.)  
      if (MissMass.gt.(3.5000)) go to 555
      if (MissMass.lt.(0.9382)) go to 555
      endif 
C
      if (Nreson.eq.7) then            !  resonance = f0(500) -> 2pi0
C      
      write(*,*) 'Hyp_Carlo: Resonance nb.', Nreson, ' is not in stream'
      stop 'Hyp_Carlo: error in channel number f0(980)'
      endif
C
      if (Nreson.eq.8.or.Nreson.eq.9) then  !  resonance = pi0 (8) or eta (9) monochromatic for 
C                                           !  Z MC calibration i.e. fixed T and Missing Mass  
      T = -0.005 
      MissMass = 0.938272
      endif      
C      
      return
      end
C
C
      subroutine reaction_Mike(Nreson, T, MissMass)
C...............................................................................
C      for given resonance ruturns trans. momentum and missing mass
C      distributions calculated by M. Stolpovsky
C      f2 calculated 30.06.11 by SA and me
C
      integer Nreson
      real regrndm
      double precision R1, R2, T, b, Random
      double precision MissMass, Mean, s2, Double_MM_distr_2pi0,FF
      double precision Double_T_distr_f2,Double_MM_distr_f2 
      integer ncalls
      data ncalls /0/
      save ncalls
C
      if (Nreson.eq.1) then           !  resonance = pi0
C
      b = 2.6129
  134 Random = REGRNDM(0) 
      T = (1./b)*dlog(Random)         !  rho = (1/b)*exp(-b*x)
  111 if (REGRNDM(0).lt.(0.493544008)) then 
          Mean = 2.9667
          s2 = 0.40686
      else
         Mean = 2.1106
         s2 = 0.79967
      endif
      MissMass = Mean+s2*rnd_gauss(1.) ! rho = (1/(sqrt(2*pi)*s2))*exp(-(x-mean)**2/(2*s2**2))
           
      if (MissMass.gt.(3.5)) go to 111
      if (MissMass.lt.(0.)) go to 111
     
      endif
C
      if (Nreson.eq.2) then            !  resonance = eta
C      
      b = 2.6305
  234 Random = REGRNDM(0)
      T = (1./b)*dlog(Random)
      Mean = 1.477
      s2 = 0.67981
  222 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5)) go to 222
      if (MissMass.lt.(0.)) go to 222
      !resonance = eta
      endif 
C
      if (Nreson.eq.3) then            !  resonance = omg -- parameters like eta 
C      
      b = 2.6305
  334 Random = REGRNDM(0)
      T = (1./b)*dlog(Random)
      Mean = 1.477
      s2 = 0.67981
  322 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.gt.(3.5)) go to 322
      if (MissMass.lt.(0.)) go to 322
      !resonance = eta
      endif 
C
      if (Nreson.eq.4) then            !  resonance = K0s
C
      b = 2.9392
      Random = REGRNDM(0)
      T = (1./b)*dlog(Random)
      Mean = 1.7538
      s2 = 0.63152
  433 MissMass = Mean+s2*rnd_gauss(1.)
      if (MissMass.lt.(0.)) go to 433
      endif 
C
      if (Nreson.eq.5) then            !  resonance = f2
C
 434  R1 = REGRNDM(0)
      R2 = REGRNDM(0)
      T = R1*2.
      if((R2*500.).gt.Double_T_distr_f2(T)) go to 434
      T = -T
c          b = 5.1                 ! from fit of Be79mm data by exp convoluted with effXres 
c          Random = REGRNDM(0)
c          T = (1./b)*dlog(Random)
          ncalls=ncalls+1
c30       write(*,*) 'reaction: I did ', ncalls, ' calls.'
c
 444     R1 = REGRNDM(0)
         R2 = REGRNDM(0)
         MissMass = R1*2.7
         if((R2*35.).gt.Double_MM_distr_f2(MissMass*1000.))go to 444
c        MissMass = 0.938272
      endif 
C
      if (Nreson.eq.6) then            !  resonance = 2pi0
C
      b = 3.26
  534 Random = REGRNDM(0)
      T = (1./b)*dlog(Random)
  555 R1 = REGRNDM(0)
      R2 = REGRNDM(0)
      FF=Double_MM_distr_2pi0(R1*3400)
C     write(*,*) 'MM distr = ', FF
      if ((R2*800.).gt.FF) go to 555
      MissMass = R1*3.4
      if (MissMass.gt.(3.5)) go to 555
      if (MissMass.lt.(0.)) go to 555
      endif 
C
      if (Nreson.eq.7) then            !  resonance = f0(500) -> 2pi0
C      
      write(*,*) 'Hyp_Carlo: Resonance nb.', Nreson, ' is not in stream'
      stop 'Hyp_Carlo: error in channel number f0(980)'
      endif
C
      if (Nreson.eq.8.or.Nreson.eq.9) then  !  resonance = pi0 (8) or eta (9) monochromatic for 
C                                           !  Z MC calibration i.e. fixed T and Missing Mass  
      T = -0.005 
      MissMass = 0.938272
      endif      
C      
      return
      end
C     
      function rnd_gauss(sigma)
c random gauss distribution with dispersion SIGMA
      real regrndm
      save pi,pi2,emi
      data pi/3.14159265358979/,pi2/-1./,emi/-1./
      
      if(pi2.lt.0.) then
         pi=acos(-1.)
	 pi2=pi*2.
	 if(emi.lt.0.) emi=2.73501842E-20  ! PC        (word - 32 bits)
      endif
	
    2   R=REGRNDM(0)
c-      if(R.lt.emi)goto 2
        R=-2.*alog(R)
c-	if(R.lt.0.)R=0.
	R=sqrt(R)*sigma        
        PHI=REGRNDM(0)*pi2
 	rnd_gauss=COS(PHI)*R ! NORMAL DISTRIB.
c-              y=SIN(PHI)*R
      return
      end
C
      function Double_MM_distr_2pi0(xx) ! Double mean returning variable type, just remind for me
C  2pi0 missing mass distribution by M. Stolpovsky
C  Max~750
      
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)    
      if(xx.lt.0) go to 742
      if(xx.gt.3400.) go to 742
      par1 = 552.90
      par2 = 34.823
      par3 = 8.5308
      par4 = 673.05
      par5 = 24.683
      par6 = 7.8292
      Func1 = par1*DEXP(-0.5*((dsqrt(xx)-par2)/par3)**2)
      Func2 = par4*DEXP(-0.5*((dsqrt(3400.-xx)-par5)/par6)**2)
      Double_MM_distr_2pi0 = Func1 + Func2
      return
C
  742 continue
      Double_MM_distr_2pi0 = 0.
      return 
      end
C
      function Double_Mass_distr_2pi0(xx)
C  2pi0 effective mass distribution by M. Stolpovsky
C  Max at 750     
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)    
      if(xx.lt.270..or.xx.gt.2100.) go to 743

      par1 = 17.402
      par2 = -.0078655
      par3 = -.0044932
      par4 = .0050605
      par5 = .0044287
      Func1 = par1*DEXP(par2*xx)*(par3+par4*xx+par5*xx*xx)
      Double_Mass_distr_2pi0 = Func1 
C     write(*,*) 'Mass distr in function = ', Double_Mass_distr_2pi0
      return
C
 743  continue
      Double_Mass_distr_2pi0 = 0.
      return 
      end
C
      function Double_T_distr_f2(xx) ! here xx in GeV, not MeV!!!!!
C     f2 T-distr. calculated 30.06.11 by SA and me
C     max~500
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)    
      if(xx.lt.0.) go to 744
      if(xx.gt.2.) go to 744
      par1 = 38.304
C     par2 =-5.8335 !original value
      par2 = -10.
      par3 = 2.5510
      par4 = 180.27
      par5 =-309.88
      par6 = 630.54
      Func1=par1*DEXP(par2*xx)*(par3+par4*xx+par5*xx*xx+par6*(xx**3))
      Double_T_distr_f2=Func1
      return
C
 744  continue
      Double_T_distr_f2=0.
      return
      end
C
      function Double_MM_distr_f2(xx)
C     f2 T-distr. calculated 30.06.11 by SA and me
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)    
      if(xx.lt.0.) go to 745
      if(xx.gt.2700.) go to 745
      par1 = 0.067956
      par2 = 0.019954
      par3 = 0.40668E-04
      par4 = -0.37954E-07
      par5 = 0.74093E-11
      Double_MM_distr_f2=par1+par2*xx+par3*xx*xx+par4*(xx**3)+
     &     par5*(xx**4)
      return
C
 745  continue
      Double_MM_distr_f2=0.
      return
      end
C
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C random generator based on ranlux subroutine C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      function regrndm(iseed)
      integer iseed
      real regrndm, x(1)
      if(iseed.ne.0)then
         CALL RLUXGO(3,iseed,0,0)
      endif
      call ranlux(x,1)
      regrndm=x(1)
      return
      end
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
